(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.parseRequest = f()}})(function(){var define,module,exports;return (function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
(function (process,global){
"use strict";

module.exports = process.hrtime || hrtime; // polyfil for window.performance.now

var performance = global.performance || {};

var performanceNow = performance.now || performance.mozNow || performance.msNow || performance.oNow || performance.webkitNow || function () {
  return new Date().getTime();
}; // generate timestamp or delta
// see http://nodejs.org/api/process.html#process_process_hrtime


function hrtime(previousTimestamp) {
  var clocktime = performanceNow.call(performance) * 1e-3;
  var seconds = Math.floor(clocktime);
  var nanoseconds = Math.floor(clocktime % 1 * 1e9);

  if (previousTimestamp) {
    seconds = seconds - previousTimestamp[0];
    nanoseconds = nanoseconds - previousTimestamp[1];

    if (nanoseconds < 0) {
      seconds--;
      nanoseconds += 1e9;
    }
  }

  return [seconds, nanoseconds];
}

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"_process":27}],2:[function(require,module,exports){
(function (process){
"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var MACHINE_ID = Math.floor(Math.random() * 0xFFFFFF);
var index = ObjectID.index = parseInt(Math.random() * 0xFFFFFF, 10);
var pid = (typeof process === 'undefined' || typeof process.pid !== 'number' ? Math.floor(Math.random() * 100000) : process.pid) % 0xFFFF;
/**
 * Determine if an object is Buffer
 *
 * Author:   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * License:  MIT
 *
 */

var isBuffer = function isBuffer(obj) {
  return !!(obj != null && obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj));
};
/**
 * Create a new immutable ObjectID instance
 *
 * @class Represents the BSON ObjectID type
 * @param {String|Number} arg Can be a 24 byte hex string, 12 byte binary string or a Number.
 * @return {Object} instance of ObjectID.
 */


function ObjectID(arg) {
  if (!(this instanceof ObjectID)) return new ObjectID(arg);
  if (arg && (arg instanceof ObjectID || arg._bsontype === "ObjectID")) return arg;
  var buf;

  if (isBuffer(arg) || Array.isArray(arg) && arg.length === 12) {
    buf = Array.prototype.slice.call(arg);
  } else if (typeof arg === "string") {
    if (arg.length !== 12 && !ObjectID.isValid(arg)) throw new Error("Argument passed in must be a single String of 12 bytes or a string of 24 hex characters");
    buf = buffer(arg);
  } else if (/number|undefined/.test(_typeof(arg))) {
    buf = buffer(generate(arg));
  }

  Object.defineProperty(this, "id", {
    enumerable: true,
    get: function get() {
      return String.fromCharCode.apply(this, buf);
    }
  });
  Object.defineProperty(this, "str", {
    get: function get() {
      return buf.map(hex.bind(this, 2)).join('');
    }
  });
}

module.exports = ObjectID;
ObjectID.generate = generate;
ObjectID.default = ObjectID;
/**
 * Creates an ObjectID from a second based number, with the rest of the ObjectID zeroed out. Used for comparisons or sorting the ObjectID.
 *
 * @param {Number} time an integer number representing a number of seconds.
 * @return {ObjectID} return the created ObjectID
 * @api public
 */

ObjectID.createFromTime = function (time) {
  time = parseInt(time, 10) % 0xFFFFFFFF;
  return new ObjectID(hex(8, time) + "0000000000000000");
};
/**
 * Creates an ObjectID from a hex string representation of an ObjectID.
 *
 * @param {String} hexString create a ObjectID from a passed in 24 byte hexstring.
 * @return {ObjectID} return the created ObjectID
 * @api public
 */


ObjectID.createFromHexString = function (hexString) {
  if (!ObjectID.isValid(hexString)) throw new Error("Invalid ObjectID hex string");
  return new ObjectID(hexString);
};
/**
 * Checks if a value is a valid bson ObjectId
 *
 * @param {String} objectid Can be a 24 byte hex string or an instance of ObjectID.
 * @return {Boolean} return true if the value is a valid bson ObjectID, return false otherwise.
 * @api public
 *
 * THE NATIVE DOCUMENTATION ISN'T CLEAR ON THIS GUY!
 * http://mongodb.github.io/node-mongodb-native/api-bson-generated/objectid.html#objectid-isvalid
 */


ObjectID.isValid = function (objectid) {
  if (!objectid || typeof objectid !== 'string' && (_typeof(objectid) !== 'object' || typeof objectid.toString !== 'function')) return false; //call .toString() to get the hex if we're
  // working with an instance of ObjectID

  return /^[0-9A-F]{24}$/i.test(objectid.toString());
};
/**
 * set a custom machineID
 * 
 * @param {String|Number} machineid Can be a string, hex-string or a number
 * @return {void}
 * @api public
 */


ObjectID.setMachineID = function (arg) {
  var machineID;

  if (typeof arg === "string") {
    // hex string
    machineID = parseInt(arg, 16); // any string

    if (isNaN(machineID)) {
      arg = ('000000' + arg).substr(-7, 6);
      machineID = "";

      for (var i = 0; i < 6; i++) {
        machineID += arg.charCodeAt(i);
      }
    }
  } else if (/number|undefined/.test(_typeof(arg))) {
    machineID = arg | 0;
  }

  MACHINE_ID = machineID & 0xFFFFFF;
};
/**
 * get the machineID
 * 
 * @return {number}
 * @api public
 */


ObjectID.getMachineID = function () {
  return MACHINE_ID;
};

ObjectID.prototype = {
  _bsontype: 'ObjectID',
  constructor: ObjectID,

  /**
   * Return the ObjectID id as a 24 byte hex string representation
   *
   * @return {String} return the 24 byte hex string representation.
   * @api public
   */
  toHexString: function toHexString() {
    return this.str;
  },

  /**
   * Compares the equality of this ObjectID with `otherID`.
   *
   * @param {Object} other ObjectID instance to compare against.
   * @return {Boolean} the result of comparing two ObjectID's
   * @api public
   */
  equals: function equals(other) {
    return !!other && this.str === other.toString();
  },

  /**
   * Returns the generation date (accurate up to the second) that this ID was generated.
   *
   * @return {Date} the generation date
   * @api public
   */
  getTimestamp: function getTimestamp() {
    return new Date(parseInt(this.str.substr(0, 8), 16) * 1000);
  }
};

function next() {
  return index = (index + 1) % 0xFFFFFF;
}

function generate(time) {
  if (typeof time !== 'number') time = Date.now() / 1000; //keep it in the ring!

  time = parseInt(time, 10) % 0xFFFFFFFF; //FFFFFFFF FFFFFF FFFF FFFFFF

  return hex(8, time) + hex(6, MACHINE_ID) + hex(4, pid) + hex(6, next());
}

function hex(length, n) {
  n = n.toString(16);
  return n.length === length ? n : "00000000".substring(n.length, length) + n;
}

function buffer(str) {
  var i = 0,
      out = [];
  if (str.length === 24) for (; i < 24; out.push(parseInt(str[i] + str[i + 1], 16)), i += 2) {
    ;
  } else if (str.length === 12) for (; i < 12; out.push(str.charCodeAt(i)), i++) {
    ;
  }
  return out;
}

var inspect = Symbol && Symbol.for('nodejs.util.inspect.custom') || 'inspect';
/**
 * Converts to a string representation of this Id.
 *
 * @return {String} return the 24 byte hex string representation.
 * @api private
 */

ObjectID.prototype[inspect] = function () {
  return "ObjectID(" + this + ")";
};

ObjectID.prototype.toJSON = ObjectID.prototype.toHexString;
ObjectID.prototype.toString = ObjectID.prototype.toHexString;

}).call(this,require('_process'))
},{"_process":27}],3:[function(require,module,exports){
'use strict';

module.exports = function (hrtime) {
  var nanoseconds = hrtime[0] * 1e9 + hrtime[1];
  var milliseconds = nanoseconds / 1e6;
  var seconds = nanoseconds / 1e9;
  return {
    seconds: seconds,
    milliseconds: milliseconds,
    nanoseconds: nanoseconds
  };
};

},{}],4:[function(require,module,exports){
/*!
 * cookie
 * Copyright(c) 2012-2014 Roman Shtylman
 * Copyright(c) 2015 Douglas Christopher Wilson
 * MIT Licensed
 */
'use strict';
/**
 * Module exports.
 * @public
 */

exports.parse = parse;
exports.serialize = serialize;
/**
 * Module variables.
 * @private
 */

var decode = decodeURIComponent;
var encode = encodeURIComponent;
var pairSplitRegExp = /; */;
/**
 * RegExp to match field-content in RFC 7230 sec 3.2
 *
 * field-content = field-vchar [ 1*( SP / HTAB ) field-vchar ]
 * field-vchar   = VCHAR / obs-text
 * obs-text      = %x80-FF
 */

var fieldContentRegExp = /^[\u0009\u0020-\u007e\u0080-\u00ff]+$/;
/**
 * Parse a cookie header.
 *
 * Parse the given cookie header string into an object
 * The object has the various cookies as keys(names) => values
 *
 * @param {string} str
 * @param {object} [options]
 * @return {object}
 * @public
 */

function parse(str, options) {
  if (typeof str !== 'string') {
    throw new TypeError('argument str must be a string');
  }

  var obj = {};
  var opt = options || {};
  var pairs = str.split(pairSplitRegExp);
  var dec = opt.decode || decode;

  for (var i = 0; i < pairs.length; i++) {
    var pair = pairs[i];
    var eq_idx = pair.indexOf('='); // skip things that don't look like key=value

    if (eq_idx < 0) {
      continue;
    }

    var key = pair.substr(0, eq_idx).trim();
    var val = pair.substr(++eq_idx, pair.length).trim(); // quoted values

    if ('"' == val[0]) {
      val = val.slice(1, -1);
    } // only assign once


    if (undefined == obj[key]) {
      obj[key] = tryDecode(val, dec);
    }
  }

  return obj;
}
/**
 * Serialize data into a cookie header.
 *
 * Serialize the a name value pair into a cookie string suitable for
 * http headers. An optional options object specified cookie parameters.
 *
 * serialize('foo', 'bar', { httpOnly: true })
 *   => "foo=bar; httpOnly"
 *
 * @param {string} name
 * @param {string} val
 * @param {object} [options]
 * @return {string}
 * @public
 */


function serialize(name, val, options) {
  var opt = options || {};
  var enc = opt.encode || encode;

  if (typeof enc !== 'function') {
    throw new TypeError('option encode is invalid');
  }

  if (!fieldContentRegExp.test(name)) {
    throw new TypeError('argument name is invalid');
  }

  var value = enc(val);

  if (value && !fieldContentRegExp.test(value)) {
    throw new TypeError('argument val is invalid');
  }

  var str = name + '=' + value;

  if (null != opt.maxAge) {
    var maxAge = opt.maxAge - 0;
    if (isNaN(maxAge)) throw new Error('maxAge should be a Number');
    str += '; Max-Age=' + Math.floor(maxAge);
  }

  if (opt.domain) {
    if (!fieldContentRegExp.test(opt.domain)) {
      throw new TypeError('option domain is invalid');
    }

    str += '; Domain=' + opt.domain;
  }

  if (opt.path) {
    if (!fieldContentRegExp.test(opt.path)) {
      throw new TypeError('option path is invalid');
    }

    str += '; Path=' + opt.path;
  }

  if (opt.expires) {
    if (typeof opt.expires.toUTCString !== 'function') {
      throw new TypeError('option expires is invalid');
    }

    str += '; Expires=' + opt.expires.toUTCString();
  }

  if (opt.httpOnly) {
    str += '; HttpOnly';
  }

  if (opt.secure) {
    str += '; Secure';
  }

  if (opt.sameSite) {
    var sameSite = typeof opt.sameSite === 'string' ? opt.sameSite.toLowerCase() : opt.sameSite;

    switch (sameSite) {
      case true:
        str += '; SameSite=Strict';
        break;

      case 'lax':
        str += '; SameSite=Lax';
        break;

      case 'strict':
        str += '; SameSite=Strict';
        break;

      case 'none':
        str += '; SameSite=None';
        break;

      default:
        throw new TypeError('option sameSite is invalid');
    }
  }

  return str;
}
/**
 * Try decoding a string using a decoding function.
 *
 * @param {string} str
 * @param {function} decode
 * @private
 */


function tryDecode(str, decode) {
  try {
    return decode(str);
  } catch (e) {
    return str;
  }
}

},{}],5:[function(require,module,exports){
'use strict';

var types = require('./lib/card-types');

var clone = require('./lib/clone');

var findBestMatch = require('./lib/find-best-match');

var isValidInputType = require('./lib/is-valid-input-type');

var addMatchingCardsToResults = require('./lib/add-matching-cards-to-results');

var testOrder;
var customCards = {};
var cardNames = {
  VISA: 'visa',
  MASTERCARD: 'mastercard',
  AMERICAN_EXPRESS: 'american-express',
  DINERS_CLUB: 'diners-club',
  DISCOVER: 'discover',
  JCB: 'jcb',
  UNIONPAY: 'unionpay',
  MAESTRO: 'maestro',
  ELO: 'elo',
  MIR: 'mir',
  HIPER: 'hiper',
  HIPERCARD: 'hipercard'
};
var ORIGINAL_TEST_ORDER = [cardNames.VISA, cardNames.MASTERCARD, cardNames.AMERICAN_EXPRESS, cardNames.DINERS_CLUB, cardNames.DISCOVER, cardNames.JCB, cardNames.UNIONPAY, cardNames.MAESTRO, cardNames.ELO, cardNames.MIR, cardNames.HIPER, cardNames.HIPERCARD];
testOrder = clone(ORIGINAL_TEST_ORDER);

function findType(type) {
  return customCards[type] || types[type];
}

function getAllCardTypes() {
  return testOrder.map(function (type) {
    return clone(findType(type));
  });
}

function getCardPosition(name, ignoreErrorForNotExisting) {
  var position = testOrder.indexOf(name);

  if (!ignoreErrorForNotExisting && position === -1) {
    throw new Error('"' + name + '" is not a supported card type.');
  }

  return position;
}

function creditCardType(cardNumber) {
  var bestMatch;
  var results = [];

  if (!isValidInputType(cardNumber)) {
    return [];
  }

  if (cardNumber.length === 0) {
    return getAllCardTypes(testOrder);
  }

  testOrder.forEach(function (type) {
    var cardConfiguration = findType(type);
    addMatchingCardsToResults(cardNumber, cardConfiguration, results);
  });
  bestMatch = findBestMatch(results);

  if (bestMatch) {
    return [bestMatch];
  }

  return results;
}

creditCardType.getTypeInfo = function (type) {
  return clone(findType(type));
};

creditCardType.removeCard = function (name) {
  var position = getCardPosition(name);
  testOrder.splice(position, 1);
};

creditCardType.addCard = function (config) {
  var existingCardPosition = getCardPosition(config.type, true);
  customCards[config.type] = config;

  if (existingCardPosition === -1) {
    testOrder.push(config.type);
  }
};

creditCardType.updateCard = function (cardType, updates) {
  var clonedCard;
  var originalObject = customCards[cardType] || types[cardType];

  if (!originalObject) {
    throw new Error('"' + cardType + '" is not a recognized type. Use `addCard` instead.');
  }

  if (updates.type && originalObject.type !== updates.type) {
    throw new Error('Cannot overwrite type parameter.');
  }

  clonedCard = clone(originalObject, true);
  Object.keys(clonedCard).forEach(function (key) {
    if (updates[key]) {
      clonedCard[key] = updates[key];
    }
  });
  customCards[clonedCard.type] = clonedCard;
};

creditCardType.changeOrder = function (name, position) {
  var currentPosition = getCardPosition(name);
  testOrder.splice(currentPosition, 1);
  testOrder.splice(position, 0, name);
};

creditCardType.resetModifications = function () {
  testOrder = clone(ORIGINAL_TEST_ORDER);
  customCards = {};
};

creditCardType.types = cardNames;
module.exports = creditCardType;

},{"./lib/add-matching-cards-to-results":6,"./lib/card-types":7,"./lib/clone":8,"./lib/find-best-match":9,"./lib/is-valid-input-type":10}],6:[function(require,module,exports){
'use strict';

var clone = require('./clone');

var matches = require('./matches');

function addMatchingCardsToResults(cardNumber, cardConfiguration, results) {
  var i, pattern, patternLength, clonedCardConfiguration;

  for (i = 0; i < cardConfiguration.patterns.length; i++) {
    pattern = cardConfiguration.patterns[i];

    if (!matches(cardNumber, pattern)) {
      continue;
    }

    clonedCardConfiguration = clone(cardConfiguration);

    if (Array.isArray(pattern)) {
      patternLength = String(pattern[0]).length;
    } else {
      patternLength = String(pattern).length;
    }

    if (cardNumber.length >= patternLength) {
      clonedCardConfiguration.matchStrength = patternLength;
    }

    results.push(clonedCardConfiguration);
    break;
  }
}

module.exports = addMatchingCardsToResults;

},{"./clone":8,"./matches":11}],7:[function(require,module,exports){
'use strict';

var cardTypes = {
  visa: {
    niceType: 'Visa',
    type: 'visa',
    patterns: [4],
    gaps: [4, 8, 12],
    lengths: [16, 18, 19],
    code: {
      name: 'CVV',
      size: 3
    }
  },
  mastercard: {
    niceType: 'Mastercard',
    type: 'mastercard',
    patterns: [[51, 55], [2221, 2229], [223, 229], [23, 26], [270, 271], 2720],
    gaps: [4, 8, 12],
    lengths: [16],
    code: {
      name: 'CVC',
      size: 3
    }
  },
  'american-express': {
    niceType: 'American Express',
    type: 'american-express',
    patterns: [34, 37],
    gaps: [4, 10],
    lengths: [15],
    code: {
      name: 'CID',
      size: 4
    }
  },
  'diners-club': {
    niceType: 'Diners Club',
    type: 'diners-club',
    patterns: [[300, 305], 36, 38, 39],
    gaps: [4, 10],
    lengths: [14, 16, 19],
    code: {
      name: 'CVV',
      size: 3
    }
  },
  discover: {
    niceType: 'Discover',
    type: 'discover',
    patterns: [6011, [644, 649], 65],
    gaps: [4, 8, 12],
    lengths: [16, 19],
    code: {
      name: 'CID',
      size: 3
    }
  },
  jcb: {
    niceType: 'JCB',
    type: 'jcb',
    patterns: [2131, 1800, [3528, 3589]],
    gaps: [4, 8, 12],
    lengths: [16, 17, 18, 19],
    code: {
      name: 'CVV',
      size: 3
    }
  },
  unionpay: {
    niceType: 'UnionPay',
    type: 'unionpay',
    patterns: [620, [624, 626], [62100, 62182], [62184, 62187], [62185, 62197], [62200, 62205], [622010, 622999], 622018, [622019, 622999], [62207, 62209], [622126, 622925], [623, 626], 6270, 6272, 6276, [627700, 627779], [627781, 627799], [6282, 6289], 6291, 6292, 810, [8110, 8131], [8132, 8151], [8152, 8163], [8164, 8171]],
    gaps: [4, 8, 12],
    lengths: [14, 15, 16, 17, 18, 19],
    code: {
      name: 'CVN',
      size: 3
    }
  },
  maestro: {
    niceType: 'Maestro',
    type: 'maestro',
    patterns: [493698, [500000, 506698], [506779, 508999], [56, 59], 63, 67, 6],
    gaps: [4, 8, 12],
    lengths: [12, 13, 14, 15, 16, 17, 18, 19],
    code: {
      name: 'CVC',
      size: 3
    }
  },
  elo: {
    niceType: 'Elo',
    type: 'elo',
    patterns: [401178, 401179, 438935, 457631, 457632, 431274, 451416, 457393, 504175, [506699, 506778], [509000, 509999], 627780, 636297, 636368, [650031, 650033], [650035, 650051], [650405, 650439], [650485, 650538], [650541, 650598], [650700, 650718], [650720, 650727], [650901, 650978], [651652, 651679], [655000, 655019], [655021, 655058]],
    gaps: [4, 8, 12],
    lengths: [16],
    code: {
      name: 'CVE',
      size: 3
    }
  },
  mir: {
    niceType: 'Mir',
    type: 'mir',
    patterns: [[2200, 2204]],
    gaps: [4, 8, 12],
    lengths: [16, 17, 18, 19],
    code: {
      name: 'CVP2',
      size: 3
    }
  },
  hiper: {
    niceType: 'Hiper',
    type: 'hiper',
    patterns: [637095, 637568, 637599, 637609, 637612],
    gaps: [4, 8, 12],
    lengths: [16],
    code: {
      name: 'CVC',
      size: 3
    }
  },
  hipercard: {
    niceType: 'Hipercard',
    type: 'hipercard',
    patterns: [606282],
    gaps: [4, 8, 12],
    lengths: [16],
    code: {
      name: 'CVC',
      size: 3
    }
  }
};
module.exports = cardTypes;

},{}],8:[function(require,module,exports){
'use strict';

function clone(originalObject) {
  var dupe;

  if (!originalObject) {
    return null;
  }

  dupe = JSON.parse(JSON.stringify(originalObject));
  return dupe;
}

module.exports = clone;

},{}],9:[function(require,module,exports){
'use strict';

function hasEnoughResultsToDetermineBestMatch(results) {
  var numberOfResultsWithMaxStrengthProperty = results.filter(function (result) {
    return result.matchStrength;
  }).length; // if all possible results have a maxStrength property
  // that means the card number is sufficiently long
  // enough to determine conclusively what the type is

  return numberOfResultsWithMaxStrengthProperty > 0 && numberOfResultsWithMaxStrengthProperty === results.length;
}

function findBestMatch(results) {
  if (!hasEnoughResultsToDetermineBestMatch(results)) {
    return;
  }

  return results.reduce(function (bestMatch, result) {
    // eslint-disable-line consistent-return
    if (!bestMatch) {
      return result;
    } // if the current best match pattern is less specific
    // than this result, set the result as the new best match


    if (bestMatch.matchStrength < result.matchStrength) {
      return result;
    }

    return bestMatch;
  });
}

module.exports = findBestMatch;

},{}],10:[function(require,module,exports){
'use strict';

function isValidInputType(cardNumber) {
  return typeof cardNumber === 'string' || cardNumber instanceof String;
}

module.exports = isValidInputType;

},{}],11:[function(require,module,exports){
'use strict'; // Adapted from https://github.com/polvo-labs/card-type/blob/aaab11f80fa1939bccc8f24905a06ae3cd864356/src/cardType.js#L37-L42

function matchesRange(cardNumber, min, max) {
  var maxLengthToCheck = String(min).length;
  var substr = cardNumber.substr(0, maxLengthToCheck);
  var integerRepresentationOfCardNumber = parseInt(substr, 10);
  min = parseInt(String(min).substr(0, substr.length), 10);
  max = parseInt(String(max).substr(0, substr.length), 10);
  return integerRepresentationOfCardNumber >= min && integerRepresentationOfCardNumber <= max;
}

function matchesPattern(cardNumber, pattern) {
  pattern = String(pattern);
  return pattern.substring(0, cardNumber.length) === cardNumber.substring(0, pattern.length);
}

function matches(cardNumber, pattern) {
  if (Array.isArray(pattern)) {
    return matchesRange(cardNumber, pattern[0], pattern[1]);
  }

  return matchesPattern(cardNumber, pattern);
}

module.exports = matches;

},{}],12:[function(require,module,exports){
(function (process){
"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/* eslint-env browser */

/**
 * This is the web browser implementation of `debug()`.
 */
exports.log = log;
exports.formatArgs = formatArgs;
exports.save = save;
exports.load = load;
exports.useColors = useColors;
exports.storage = localstorage();
/**
 * Colors.
 */

exports.colors = ['#0000CC', '#0000FF', '#0033CC', '#0033FF', '#0066CC', '#0066FF', '#0099CC', '#0099FF', '#00CC00', '#00CC33', '#00CC66', '#00CC99', '#00CCCC', '#00CCFF', '#3300CC', '#3300FF', '#3333CC', '#3333FF', '#3366CC', '#3366FF', '#3399CC', '#3399FF', '#33CC00', '#33CC33', '#33CC66', '#33CC99', '#33CCCC', '#33CCFF', '#6600CC', '#6600FF', '#6633CC', '#6633FF', '#66CC00', '#66CC33', '#9900CC', '#9900FF', '#9933CC', '#9933FF', '#99CC00', '#99CC33', '#CC0000', '#CC0033', '#CC0066', '#CC0099', '#CC00CC', '#CC00FF', '#CC3300', '#CC3333', '#CC3366', '#CC3399', '#CC33CC', '#CC33FF', '#CC6600', '#CC6633', '#CC9900', '#CC9933', '#CCCC00', '#CCCC33', '#FF0000', '#FF0033', '#FF0066', '#FF0099', '#FF00CC', '#FF00FF', '#FF3300', '#FF3333', '#FF3366', '#FF3399', '#FF33CC', '#FF33FF', '#FF6600', '#FF6633', '#FF9900', '#FF9933', '#FFCC00', '#FFCC33'];
/**
 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
 * and the Firebug extension (any Firefox version) are known
 * to support "%c" CSS customizations.
 *
 * TODO: add a `localStorage` variable to explicitly enable/disable colors
 */
// eslint-disable-next-line complexity

function useColors() {
  // NB: In an Electron preload script, document will be defined but not fully
  // initialized. Since we know we're in Chrome, we'll just detect this case
  // explicitly
  if (typeof window !== 'undefined' && window.process && (window.process.type === 'renderer' || window.process.__nwjs)) {
    return true;
  } // Internet Explorer and Edge do not support colors.


  if (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) {
    return false;
  } // Is webkit? http://stackoverflow.com/a/16459606/376773
  // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632


  return typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || // Is firebug? http://stackoverflow.com/a/398120/376773
  typeof window !== 'undefined' && window.console && (window.console.firebug || window.console.exception && window.console.table) || // Is firefox >= v31?
  // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
  typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31 || // Double check webkit in userAgent just in case we are in a worker
  typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
}
/**
 * Colorize log arguments if enabled.
 *
 * @api public
 */


function formatArgs(args) {
  args[0] = (this.useColors ? '%c' : '') + this.namespace + (this.useColors ? ' %c' : ' ') + args[0] + (this.useColors ? '%c ' : ' ') + '+' + module.exports.humanize(this.diff);

  if (!this.useColors) {
    return;
  }

  var c = 'color: ' + this.color;
  args.splice(1, 0, c, 'color: inherit'); // The final "%c" is somewhat tricky, because there could be other
  // arguments passed either before or after the %c, so we need to
  // figure out the correct index to insert the CSS into

  var index = 0;
  var lastC = 0;
  args[0].replace(/%[a-zA-Z%]/g, function (match) {
    if (match === '%%') {
      return;
    }

    index++;

    if (match === '%c') {
      // We only are interested in the *last* %c
      // (the user may have provided their own)
      lastC = index;
    }
  });
  args.splice(lastC, 0, c);
}
/**
 * Invokes `console.log()` when available.
 * No-op when `console.log` is not a "function".
 *
 * @api public
 */


function log() {
  var _console;

  // This hackery is required for IE8/9, where
  // the `console.log` function doesn't have 'apply'
  return (typeof console === "undefined" ? "undefined" : _typeof(console)) === 'object' && console.log && (_console = console).log.apply(_console, arguments);
}
/**
 * Save `namespaces`.
 *
 * @param {String} namespaces
 * @api private
 */


function save(namespaces) {
  try {
    if (namespaces) {
      exports.storage.setItem('debug', namespaces);
    } else {
      exports.storage.removeItem('debug');
    }
  } catch (error) {// Swallow
    // XXX (@Qix-) should we be logging these?
  }
}
/**
 * Load `namespaces`.
 *
 * @return {String} returns the previously persisted debug modes
 * @api private
 */


function load() {
  var r;

  try {
    r = exports.storage.getItem('debug');
  } catch (error) {} // Swallow
  // XXX (@Qix-) should we be logging these?
  // If debug isn't set in LS, and we're in Electron, try to load $DEBUG


  if (!r && typeof process !== 'undefined' && 'env' in process) {
    r = process.env.DEBUG;
  }

  return r;
}
/**
 * Localstorage attempts to return the localstorage.
 *
 * This is necessary because safari throws
 * when a user disables cookies/localstorage
 * and you attempt to access it.
 *
 * @return {LocalStorage}
 * @api private
 */


function localstorage() {
  try {
    // TVMLKit (Apple TV JS Runtime) does not have a window object, just localStorage in the global context
    // The Browser also has localStorage in the global context.
    return localStorage;
  } catch (error) {// Swallow
    // XXX (@Qix-) should we be logging these?
  }
}

module.exports = require('./common')(exports);
var formatters = module.exports.formatters;
/**
 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
 */

formatters.j = function (v) {
  try {
    return JSON.stringify(v);
  } catch (error) {
    return '[UnexpectedJSONParseError]: ' + error.message;
  }
};

}).call(this,require('_process'))
},{"./common":13,"_process":27}],13:[function(require,module,exports){
"use strict";

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

/**
 * This is the common logic for both the Node.js and web browser
 * implementations of `debug()`.
 */
function setup(env) {
  createDebug.debug = createDebug;
  createDebug.default = createDebug;
  createDebug.coerce = coerce;
  createDebug.disable = disable;
  createDebug.enable = enable;
  createDebug.enabled = enabled;
  createDebug.humanize = require('ms');
  Object.keys(env).forEach(function (key) {
    createDebug[key] = env[key];
  });
  /**
  * Active `debug` instances.
  */

  createDebug.instances = [];
  /**
  * The currently active debug mode names, and names to skip.
  */

  createDebug.names = [];
  createDebug.skips = [];
  /**
  * Map of special "%n" handling functions, for the debug "format" argument.
  *
  * Valid key names are a single, lower or upper-case letter, i.e. "n" and "N".
  */

  createDebug.formatters = {};
  /**
  * Selects a color for a debug namespace
  * @param {String} namespace The namespace string for the for the debug instance to be colored
  * @return {Number|String} An ANSI color code for the given namespace
  * @api private
  */

  function selectColor(namespace) {
    var hash = 0;

    for (var i = 0; i < namespace.length; i++) {
      hash = (hash << 5) - hash + namespace.charCodeAt(i);
      hash |= 0; // Convert to 32bit integer
    }

    return createDebug.colors[Math.abs(hash) % createDebug.colors.length];
  }

  createDebug.selectColor = selectColor;
  /**
  * Create a debugger with the given `namespace`.
  *
  * @param {String} namespace
  * @return {Function}
  * @api public
  */

  function createDebug(namespace) {
    var prevTime;

    function debug() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      // Disabled?
      if (!debug.enabled) {
        return;
      }

      var self = debug; // Set `diff` timestamp

      var curr = Number(new Date());
      var ms = curr - (prevTime || curr);
      self.diff = ms;
      self.prev = prevTime;
      self.curr = curr;
      prevTime = curr;
      args[0] = createDebug.coerce(args[0]);

      if (typeof args[0] !== 'string') {
        // Anything else let's inspect with %O
        args.unshift('%O');
      } // Apply any `formatters` transformations


      var index = 0;
      args[0] = args[0].replace(/%([a-zA-Z%])/g, function (match, format) {
        // If we encounter an escaped % then don't increase the array index
        if (match === '%%') {
          return match;
        }

        index++;
        var formatter = createDebug.formatters[format];

        if (typeof formatter === 'function') {
          var val = args[index];
          match = formatter.call(self, val); // Now we need to remove `args[index]` since it's inlined in the `format`

          args.splice(index, 1);
          index--;
        }

        return match;
      }); // Apply env-specific formatting (colors, etc.)

      createDebug.formatArgs.call(self, args);
      var logFn = self.log || createDebug.log;
      logFn.apply(self, args);
    }

    debug.namespace = namespace;
    debug.enabled = createDebug.enabled(namespace);
    debug.useColors = createDebug.useColors();
    debug.color = selectColor(namespace);
    debug.destroy = destroy;
    debug.extend = extend; // Debug.formatArgs = formatArgs;
    // debug.rawLog = rawLog;
    // env-specific initialization logic for debug instances

    if (typeof createDebug.init === 'function') {
      createDebug.init(debug);
    }

    createDebug.instances.push(debug);
    return debug;
  }

  function destroy() {
    var index = createDebug.instances.indexOf(this);

    if (index !== -1) {
      createDebug.instances.splice(index, 1);
      return true;
    }

    return false;
  }

  function extend(namespace, delimiter) {
    var newDebug = createDebug(this.namespace + (typeof delimiter === 'undefined' ? ':' : delimiter) + namespace);
    newDebug.log = this.log;
    return newDebug;
  }
  /**
  * Enables a debug mode by namespaces. This can include modes
  * separated by a colon and wildcards.
  *
  * @param {String} namespaces
  * @api public
  */


  function enable(namespaces) {
    createDebug.save(namespaces);
    createDebug.names = [];
    createDebug.skips = [];
    var i;
    var split = (typeof namespaces === 'string' ? namespaces : '').split(/[\s,]+/);
    var len = split.length;

    for (i = 0; i < len; i++) {
      if (!split[i]) {
        // ignore empty strings
        continue;
      }

      namespaces = split[i].replace(/\*/g, '.*?');

      if (namespaces[0] === '-') {
        createDebug.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
      } else {
        createDebug.names.push(new RegExp('^' + namespaces + '$'));
      }
    }

    for (i = 0; i < createDebug.instances.length; i++) {
      var instance = createDebug.instances[i];
      instance.enabled = createDebug.enabled(instance.namespace);
    }
  }
  /**
  * Disable debug output.
  *
  * @return {String} namespaces
  * @api public
  */


  function disable() {
    var namespaces = [].concat(_toConsumableArray(createDebug.names.map(toNamespace)), _toConsumableArray(createDebug.skips.map(toNamespace).map(function (namespace) {
      return '-' + namespace;
    }))).join(',');
    createDebug.enable('');
    return namespaces;
  }
  /**
  * Returns true if the given mode name is enabled, false otherwise.
  *
  * @param {String} name
  * @return {Boolean}
  * @api public
  */


  function enabled(name) {
    if (name[name.length - 1] === '*') {
      return true;
    }

    var i;
    var len;

    for (i = 0, len = createDebug.skips.length; i < len; i++) {
      if (createDebug.skips[i].test(name)) {
        return false;
      }
    }

    for (i = 0, len = createDebug.names.length; i < len; i++) {
      if (createDebug.names[i].test(name)) {
        return true;
      }
    }

    return false;
  }
  /**
  * Convert regexp to namespace
  *
  * @param {RegExp} regxep
  * @return {String} namespace
  * @api private
  */


  function toNamespace(regexp) {
    return regexp.toString().substring(2, regexp.toString().length - 2).replace(/\.\*\?$/, '*');
  }
  /**
  * Coerce `val`.
  *
  * @param {Mixed} val
  * @return {Mixed}
  * @api private
  */


  function coerce(val) {
    if (val instanceof Error) {
      return val.stack || val.message;
    }

    return val;
  }

  createDebug.enable(createDebug.load());
  return createDebug;
}

module.exports = setup;

},{"ms":21}],14:[function(require,module,exports){
"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

module.exports = stringify;
stringify.default = stringify;
stringify.stable = deterministicStringify;
stringify.stableStringify = deterministicStringify;
var arr = [];
var replacerStack = []; // Regular stringify

function stringify(obj, replacer, spacer) {
  decirc(obj, '', [], undefined);
  var res;

  if (replacerStack.length === 0) {
    res = JSON.stringify(obj, replacer, spacer);
  } else {
    res = JSON.stringify(obj, replaceGetterValues(replacer), spacer);
  }

  while (arr.length !== 0) {
    var part = arr.pop();

    if (part.length === 4) {
      Object.defineProperty(part[0], part[1], part[3]);
    } else {
      part[0][part[1]] = part[2];
    }
  }

  return res;
}

function decirc(val, k, stack, parent) {
  var i;

  if (_typeof(val) === 'object' && val !== null) {
    for (i = 0; i < stack.length; i++) {
      if (stack[i] === val) {
        var propertyDescriptor = Object.getOwnPropertyDescriptor(parent, k);

        if (propertyDescriptor.get !== undefined) {
          if (propertyDescriptor.configurable) {
            Object.defineProperty(parent, k, {
              value: '[Circular]'
            });
            arr.push([parent, k, val, propertyDescriptor]);
          } else {
            replacerStack.push([val, k]);
          }
        } else {
          parent[k] = '[Circular]';
          arr.push([parent, k, val]);
        }

        return;
      }
    }

    stack.push(val); // Optimize for Arrays. Big arrays could kill the performance otherwise!

    if (Array.isArray(val)) {
      for (i = 0; i < val.length; i++) {
        decirc(val[i], i, stack, val);
      }
    } else {
      var keys = Object.keys(val);

      for (i = 0; i < keys.length; i++) {
        var key = keys[i];
        decirc(val[key], key, stack, val);
      }
    }

    stack.pop();
  }
} // Stable-stringify


function compareFunction(a, b) {
  if (a < b) {
    return -1;
  }

  if (a > b) {
    return 1;
  }

  return 0;
}

function deterministicStringify(obj, replacer, spacer) {
  var tmp = deterministicDecirc(obj, '', [], undefined) || obj;
  var res;

  if (replacerStack.length === 0) {
    res = JSON.stringify(tmp, replacer, spacer);
  } else {
    res = JSON.stringify(tmp, replaceGetterValues(replacer), spacer);
  }

  while (arr.length !== 0) {
    var part = arr.pop();

    if (part.length === 4) {
      Object.defineProperty(part[0], part[1], part[3]);
    } else {
      part[0][part[1]] = part[2];
    }
  }

  return res;
}

function deterministicDecirc(val, k, stack, parent) {
  var i;

  if (_typeof(val) === 'object' && val !== null) {
    for (i = 0; i < stack.length; i++) {
      if (stack[i] === val) {
        var propertyDescriptor = Object.getOwnPropertyDescriptor(parent, k);

        if (propertyDescriptor.get !== undefined) {
          if (propertyDescriptor.configurable) {
            Object.defineProperty(parent, k, {
              value: '[Circular]'
            });
            arr.push([parent, k, val, propertyDescriptor]);
          } else {
            replacerStack.push([val, k]);
          }
        } else {
          parent[k] = '[Circular]';
          arr.push([parent, k, val]);
        }

        return;
      }
    }

    if (typeof val.toJSON === 'function') {
      return;
    }

    stack.push(val); // Optimize for Arrays. Big arrays could kill the performance otherwise!

    if (Array.isArray(val)) {
      for (i = 0; i < val.length; i++) {
        deterministicDecirc(val[i], i, stack, val);
      }
    } else {
      // Create a temporary object in the required way
      var tmp = {};
      var keys = Object.keys(val).sort(compareFunction);

      for (i = 0; i < keys.length; i++) {
        var key = keys[i];
        deterministicDecirc(val[key], key, stack, val);
        tmp[key] = val[key];
      }

      if (parent !== undefined) {
        arr.push([parent, k, val]);
        parent[k] = tmp;
      } else {
        return tmp;
      }
    }

    stack.pop();
  }
} // wraps replacer function to handle values we couldn't replace
// and mark them as [Circular]


function replaceGetterValues(replacer) {
  replacer = replacer !== undefined ? replacer : function (k, v) {
    return v;
  };
  return function (key, val) {
    if (replacerStack.length > 0) {
      for (var i = 0; i < replacerStack.length; i++) {
        var part = replacerStack[i];

        if (part[1] === key && part[0] === val) {
          val = '[Circular]';
          replacerStack.splice(i, 1);
          break;
        }
      }
    }

    return replacer.call(this, key, val);
  };
}

},{}],15:[function(require,module,exports){
'use strict';

var nextLine = require('next-line'); // RFC-2068 Start-Line definitions:
//   Request-Line: Method SP Request-URI SP HTTP-Version CRLF
//   Status-Line:  HTTP-Version SP Status-Code SP Reason-Phrase CRLF


var startLine = /^[A-Z_]+(\/\d\.\d)? /;
var requestLine = /^([A-Z_]+) (.+) [A-Z]+\/(\d)\.(\d)$/;
var statusLine = /^[A-Z]+\/(\d)\.(\d) (\d{3}) (.*)$/;

module.exports = function (data, onlyHeaders) {
  return parse(normalize(data), onlyHeaders);
};

function parse(str, onlyHeaders) {
  var line = firstLine(str);
  var match;

  if (onlyHeaders && startLine.test(line)) {
    return parseHeaders(str);
  } else if ((match = line.match(requestLine)) !== null) {
    return {
      method: match[1],
      url: match[2],
      version: {
        major: parseInt(match[3], 10),
        minor: parseInt(match[4], 10)
      },
      headers: parseHeaders(str)
    };
  } else if ((match = line.match(statusLine)) !== null) {
    return {
      version: {
        major: parseInt(match[1], 10),
        minor: parseInt(match[2], 10)
      },
      statusCode: parseInt(match[3], 10),
      statusMessage: match[4],
      headers: parseHeaders(str)
    };
  } else {
    return parseHeaders(str);
  }
}

function parseHeaders(str) {
  var headers = {};
  var next = nextLine(str);
  var line = next();
  var index, name, value;
  if (startLine.test(line)) line = next();

  while (line) {
    // subsequent lines in multi-line headers start with whitespace
    if (line[0] === ' ' || line[0] === '\t') {
      value += ' ' + line.trim();
      line = next();
      continue;
    }

    if (name) addHeaderLine(name, value, headers);
    index = line.indexOf(':');
    name = line.substr(0, index);
    value = line.substr(index + 1).trim();
    line = next();
  }

  if (name) addHeaderLine(name, value, headers);
  return headers;
}

function normalize(str) {
  if (str && str._header) str = str._header; // extra headers from http.ServerResponse object

  if (!str || typeof str.toString !== 'function') return '';
  return str.toString().trim();
}

function firstLine(str) {
  var nl = str.indexOf('\r\n');
  if (nl === -1) return str;else return str.slice(0, nl);
} // The following function is lifted from:
// https://github.com/nodejs/node/blob/f1294f5bfd7f02bce8029818be9c92de59749137/lib/_http_incoming.js#L116-L170
//
// Add the given (field, value) pair to the message
//
// Per RFC2616, section 4.2 it is acceptable to join multiple instances of the
// same header with a ', ' if the header in question supports specification of
// multiple values this way. If not, we declare the first instance the winner
// and drop the second. Extended header fields (those beginning with 'x-') are
// always joined.


function addHeaderLine(field, value, dest) {
  field = field.toLowerCase();

  switch (field) {
    // Array headers:
    case 'set-cookie':
      if (dest[field] !== undefined) {
        dest[field].push(value);
      } else {
        dest[field] = [value];
      }

      break;
    // list is taken from:
    // https://mxr.mozilla.org/mozilla/source/netwerk/protocol/http/src/nsHttpHeaderArray.cpp

    case 'content-type':
    case 'content-length':
    case 'user-agent':
    case 'referer':
    case 'host':
    case 'authorization':
    case 'proxy-authorization':
    case 'if-modified-since':
    case 'if-unmodified-since':
    case 'from':
    case 'location':
    case 'max-forwards':
    case 'retry-after':
    case 'etag':
    case 'last-modified':
    case 'server':
    case 'age':
    case 'expires':
      // drop duplicates
      if (dest[field] === undefined) dest[field] = value;
      break;

    default:
      // make comma-separated list
      if (typeof dest[field] === 'string') {
        dest[field] += ', ' + value;
      } else {
        dest[field] = value;
      }

  }
}

},{"next-line":22}],16:[function(require,module,exports){
/*!
 * isArrayBuffer v1.0.1
 * https://github.com/fengyuanchen/is-array-buffer
 *
 * Copyright (c) 2015-2018 Chen Fengyuan
 * Released under the MIT license
 *
 * Date: 2018-04-01T07:19:08.136Z
 */
'use strict';

var hasArrayBuffer = typeof ArrayBuffer === 'function';
var toString = Object.prototype.toString;
/**
 * Check if the given value is an ArrayBuffer.
 * @param {*} value - The value to check.
 * @returns {boolean} Returns `true` if the given value is an ArrayBuffer, else `false`.
 * @example
 * isArrayBuffer(new ArrayBuffer())
 * // => true
 * isArrayBuffer([])
 * // => false
 */

function isArrayBuffer(value) {
  return hasArrayBuffer && (value instanceof ArrayBuffer || toString.call(value) === '[object ArrayBuffer]');
}

module.exports = isArrayBuffer;

},{}],17:[function(require,module,exports){
"use strict";

/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
module.exports = function isBuffer(obj) {
  return obj != null && obj.constructor != null && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj);
};

},{}],18:[function(require,module,exports){
'use strict';

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var isStream = function isStream(stream) {
  return stream !== null && _typeof(stream) === 'object' && typeof stream.pipe === 'function';
};

isStream.writable = function (stream) {
  return isStream(stream) && stream.writable !== false && typeof stream._write === 'function' && _typeof(stream._writableState) === 'object';
};

isStream.readable = function (stream) {
  return isStream(stream) && stream.readable !== false && typeof stream._read === 'function' && _typeof(stream._readableState) === 'object';
};

isStream.duplex = function (stream) {
  return isStream.writable(stream) && isStream.readable(stream);
};

isStream.transform = function (stream) {
  return isStream.duplex(stream) && typeof stream._transform === 'function' && _typeof(stream._transformState) === 'object';
};

module.exports = isStream;

},{}],19:[function(require,module,exports){
'use strict';

var v1Regex = /^[0-9a-f]{8}-[0-9a-f]{4}-[1][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;
var v2Regex = /^[0-9a-f]{8}-[0-9a-f]{4}-[2][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;
var v3Regex = /^[0-9a-f]{8}-[0-9a-f]{4}-[3][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;
var v4Regex = /^[0-9a-f]{8}-[0-9a-f]{4}-[4][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;
var v5Regex = /^[0-9a-f]{8}-[0-9a-f]{4}-[5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;
var nilRegex = /^[0]{8}-[0]{4}-[0]{4}-[0]{4}-[0]{12}$/i;
var anyRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;

function v1(str) {
  return v1Regex.test(str);
}

function v2(str) {
  return v2Regex.test(str);
}

function v3(str) {
  return v3Regex.test(str);
}

function v4(str) {
  return v4Regex.test(str);
}

function v5(str) {
  return v5Regex.test(str);
}

function nil(str) {
  return nilRegex.test(str);
}

function anyNonNil(str) {
  return anyRegex.test(str);
}

module.exports = {
  v1: v1,
  v2: v2,
  v3: v3,
  v4: v4,
  v5: v5,
  nil: nil,
  anyNonNil: anyNonNil
};

},{}],20:[function(require,module,exports){
"use strict";

/**
 * Special language-specific overrides.
 *
 * Source: ftp://ftp.unicode.org/Public/UCD/latest/ucd/SpecialCasing.txt
 *
 * @type {Object}
 */
var LANGUAGES = {
  tr: {
    regexp: /\u0130|\u0049|\u0049\u0307/g,
    map: {
      "\u0130": "i",
      "I": "\u0131",
      "I\u0307": "i"
    }
  },
  az: {
    regexp: /[\u0130]/g,
    map: {
      "\u0130": "i",
      "I": "\u0131",
      "I\u0307": "i"
    }
  },
  lt: {
    regexp: /[\u0049\u004A\u012E\u00CC\u00CD\u0128]/g,
    map: {
      "I": "i\u0307",
      "J": "j\u0307",
      "\u012E": "\u012F\u0307",
      "\xCC": "i\u0307\u0300",
      "\xCD": "i\u0307\u0301",
      "\u0128": "i\u0307\u0303"
    }
  }
};
/**
 * Lowercase a string.
 *
 * @param  {String} str
 * @return {String}
 */

module.exports = function (str, locale) {
  var lang = LANGUAGES[locale];
  str = str == null ? '' : String(str);

  if (lang) {
    str = str.replace(lang.regexp, function (m) {
      return lang.map[m];
    });
  }

  return str.toLowerCase();
};

},{}],21:[function(require,module,exports){
"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/**
 * Helpers.
 */
var s = 1000;
var m = s * 60;
var h = m * 60;
var d = h * 24;
var w = d * 7;
var y = d * 365.25;
/**
 * Parse or format the given `val`.
 *
 * Options:
 *
 *  - `long` verbose formatting [false]
 *
 * @param {String|Number} val
 * @param {Object} [options]
 * @throws {Error} throw an error if val is not a non-empty string or a number
 * @return {String|Number}
 * @api public
 */

module.exports = function (val, options) {
  options = options || {};

  var type = _typeof(val);

  if (type === 'string' && val.length > 0) {
    return parse(val);
  } else if (type === 'number' && isFinite(val)) {
    return options.long ? fmtLong(val) : fmtShort(val);
  }

  throw new Error('val is not a non-empty string or a valid number. val=' + JSON.stringify(val));
};
/**
 * Parse the given `str` and return milliseconds.
 *
 * @param {String} str
 * @return {Number}
 * @api private
 */


function parse(str) {
  str = String(str);

  if (str.length > 100) {
    return;
  }

  var match = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(str);

  if (!match) {
    return;
  }

  var n = parseFloat(match[1]);
  var type = (match[2] || 'ms').toLowerCase();

  switch (type) {
    case 'years':
    case 'year':
    case 'yrs':
    case 'yr':
    case 'y':
      return n * y;

    case 'weeks':
    case 'week':
    case 'w':
      return n * w;

    case 'days':
    case 'day':
    case 'd':
      return n * d;

    case 'hours':
    case 'hour':
    case 'hrs':
    case 'hr':
    case 'h':
      return n * h;

    case 'minutes':
    case 'minute':
    case 'mins':
    case 'min':
    case 'm':
      return n * m;

    case 'seconds':
    case 'second':
    case 'secs':
    case 'sec':
    case 's':
      return n * s;

    case 'milliseconds':
    case 'millisecond':
    case 'msecs':
    case 'msec':
    case 'ms':
      return n;

    default:
      return undefined;
  }
}
/**
 * Short format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */


function fmtShort(ms) {
  var msAbs = Math.abs(ms);

  if (msAbs >= d) {
    return Math.round(ms / d) + 'd';
  }

  if (msAbs >= h) {
    return Math.round(ms / h) + 'h';
  }

  if (msAbs >= m) {
    return Math.round(ms / m) + 'm';
  }

  if (msAbs >= s) {
    return Math.round(ms / s) + 's';
  }

  return ms + 'ms';
}
/**
 * Long format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */


function fmtLong(ms) {
  var msAbs = Math.abs(ms);

  if (msAbs >= d) {
    return plural(ms, msAbs, d, 'day');
  }

  if (msAbs >= h) {
    return plural(ms, msAbs, h, 'hour');
  }

  if (msAbs >= m) {
    return plural(ms, msAbs, m, 'minute');
  }

  if (msAbs >= s) {
    return plural(ms, msAbs, s, 'second');
  }

  return ms + ' ms';
}
/**
 * Pluralization helper.
 */


function plural(ms, msAbs, n, name) {
  var isPlural = msAbs >= n * 1.5;
  return Math.round(ms / n) + ' ' + name + (isPlural ? 's' : '');
}

},{}],22:[function(require,module,exports){
'use strict';

module.exports = function (str) {
  var offset = 0;
  str = str.toString();
  return iterator;

  function iterator() {
    var i1 = str.indexOf('\r\n', offset);
    var i2 = str.indexOf('\n', offset);
    var i3 = str.indexOf('\r', offset);
    var indexes = [i1, i2, i3];
    var index = indexes.sort(function (a, b) {
      if (a > b) return 1;
      if (a < b) return -1;
      return 0;
    }).filter(function (index) {
      return index !== -1;
    })[0];
    if (index !== undefined) return extract(index, index === i1 ? 2 : 1);
    var length = str.length;
    if (length === offset) return null;
    return extract(length, 0);
  }

  function extract(index, skip) {
    var line = str.substr(offset, index - offset);
    offset = index + skip;
    return line;
  }
};

},{}],23:[function(require,module,exports){
"use strict";

var lowerCase = require('lower-case');

var NON_WORD_REGEXP = require('./vendor/non-word-regexp');

var CAMEL_CASE_REGEXP = require('./vendor/camel-case-regexp');

var CAMEL_CASE_UPPER_REGEXP = require('./vendor/camel-case-upper-regexp');
/**
 * Sentence case a string.
 *
 * @param  {string} str
 * @param  {string} locale
 * @param  {string} replacement
 * @return {string}
 */


module.exports = function (str, locale, replacement) {
  if (str == null) {
    return '';
  }

  replacement = typeof replacement !== 'string' ? ' ' : replacement;

  function replace(match, index, value) {
    if (index === 0 || index === value.length - match.length) {
      return '';
    }

    return replacement;
  }

  str = String(str) // Support camel case ("camelCase" -> "camel Case").
  .replace(CAMEL_CASE_REGEXP, '$1 $2') // Support odd camel case ("CAMELCase" -> "CAMEL Case").
  .replace(CAMEL_CASE_UPPER_REGEXP, '$1 $2') // Remove all non-word characters and replace with a single space.
  .replace(NON_WORD_REGEXP, replace); // Lower case the entire string.

  return lowerCase(str, locale);
};

},{"./vendor/camel-case-regexp":24,"./vendor/camel-case-upper-regexp":25,"./vendor/non-word-regexp":26,"lower-case":20}],24:[function(require,module,exports){
"use strict";

module.exports = /([a-z\xB5\xDF-\xF6\xF8-\xFF\u0101\u0103\u0105\u0107\u0109\u010B\u010D\u010F\u0111\u0113\u0115\u0117\u0119\u011B\u011D\u011F\u0121\u0123\u0125\u0127\u0129\u012B\u012D\u012F\u0131\u0133\u0135\u0137\u0138\u013A\u013C\u013E\u0140\u0142\u0144\u0146\u0148\u0149\u014B\u014D\u014F\u0151\u0153\u0155\u0157\u0159\u015B\u015D\u015F\u0161\u0163\u0165\u0167\u0169\u016B\u016D\u016F\u0171\u0173\u0175\u0177\u017A\u017C\u017E-\u0180\u0183\u0185\u0188\u018C\u018D\u0192\u0195\u0199-\u019B\u019E\u01A1\u01A3\u01A5\u01A8\u01AA\u01AB\u01AD\u01B0\u01B4\u01B6\u01B9\u01BA\u01BD-\u01BF\u01C6\u01C9\u01CC\u01CE\u01D0\u01D2\u01D4\u01D6\u01D8\u01DA\u01DC\u01DD\u01DF\u01E1\u01E3\u01E5\u01E7\u01E9\u01EB\u01ED\u01EF\u01F0\u01F3\u01F5\u01F9\u01FB\u01FD\u01FF\u0201\u0203\u0205\u0207\u0209\u020B\u020D\u020F\u0211\u0213\u0215\u0217\u0219\u021B\u021D\u021F\u0221\u0223\u0225\u0227\u0229\u022B\u022D\u022F\u0231\u0233-\u0239\u023C\u023F\u0240\u0242\u0247\u0249\u024B\u024D\u024F-\u0293\u0295-\u02AF\u0371\u0373\u0377\u037B-\u037D\u0390\u03AC-\u03CE\u03D0\u03D1\u03D5-\u03D7\u03D9\u03DB\u03DD\u03DF\u03E1\u03E3\u03E5\u03E7\u03E9\u03EB\u03ED\u03EF-\u03F3\u03F5\u03F8\u03FB\u03FC\u0430-\u045F\u0461\u0463\u0465\u0467\u0469\u046B\u046D\u046F\u0471\u0473\u0475\u0477\u0479\u047B\u047D\u047F\u0481\u048B\u048D\u048F\u0491\u0493\u0495\u0497\u0499\u049B\u049D\u049F\u04A1\u04A3\u04A5\u04A7\u04A9\u04AB\u04AD\u04AF\u04B1\u04B3\u04B5\u04B7\u04B9\u04BB\u04BD\u04BF\u04C2\u04C4\u04C6\u04C8\u04CA\u04CC\u04CE\u04CF\u04D1\u04D3\u04D5\u04D7\u04D9\u04DB\u04DD\u04DF\u04E1\u04E3\u04E5\u04E7\u04E9\u04EB\u04ED\u04EF\u04F1\u04F3\u04F5\u04F7\u04F9\u04FB\u04FD\u04FF\u0501\u0503\u0505\u0507\u0509\u050B\u050D\u050F\u0511\u0513\u0515\u0517\u0519\u051B\u051D\u051F\u0521\u0523\u0525\u0527\u0529\u052B\u052D\u052F\u0561-\u0587\u13F8-\u13FD\u1D00-\u1D2B\u1D6B-\u1D77\u1D79-\u1D9A\u1E01\u1E03\u1E05\u1E07\u1E09\u1E0B\u1E0D\u1E0F\u1E11\u1E13\u1E15\u1E17\u1E19\u1E1B\u1E1D\u1E1F\u1E21\u1E23\u1E25\u1E27\u1E29\u1E2B\u1E2D\u1E2F\u1E31\u1E33\u1E35\u1E37\u1E39\u1E3B\u1E3D\u1E3F\u1E41\u1E43\u1E45\u1E47\u1E49\u1E4B\u1E4D\u1E4F\u1E51\u1E53\u1E55\u1E57\u1E59\u1E5B\u1E5D\u1E5F\u1E61\u1E63\u1E65\u1E67\u1E69\u1E6B\u1E6D\u1E6F\u1E71\u1E73\u1E75\u1E77\u1E79\u1E7B\u1E7D\u1E7F\u1E81\u1E83\u1E85\u1E87\u1E89\u1E8B\u1E8D\u1E8F\u1E91\u1E93\u1E95-\u1E9D\u1E9F\u1EA1\u1EA3\u1EA5\u1EA7\u1EA9\u1EAB\u1EAD\u1EAF\u1EB1\u1EB3\u1EB5\u1EB7\u1EB9\u1EBB\u1EBD\u1EBF\u1EC1\u1EC3\u1EC5\u1EC7\u1EC9\u1ECB\u1ECD\u1ECF\u1ED1\u1ED3\u1ED5\u1ED7\u1ED9\u1EDB\u1EDD\u1EDF\u1EE1\u1EE3\u1EE5\u1EE7\u1EE9\u1EEB\u1EED\u1EEF\u1EF1\u1EF3\u1EF5\u1EF7\u1EF9\u1EFB\u1EFD\u1EFF-\u1F07\u1F10-\u1F15\u1F20-\u1F27\u1F30-\u1F37\u1F40-\u1F45\u1F50-\u1F57\u1F60-\u1F67\u1F70-\u1F7D\u1F80-\u1F87\u1F90-\u1F97\u1FA0-\u1FA7\u1FB0-\u1FB4\u1FB6\u1FB7\u1FBE\u1FC2-\u1FC4\u1FC6\u1FC7\u1FD0-\u1FD3\u1FD6\u1FD7\u1FE0-\u1FE7\u1FF2-\u1FF4\u1FF6\u1FF7\u210A\u210E\u210F\u2113\u212F\u2134\u2139\u213C\u213D\u2146-\u2149\u214E\u2184\u2C30-\u2C5E\u2C61\u2C65\u2C66\u2C68\u2C6A\u2C6C\u2C71\u2C73\u2C74\u2C76-\u2C7B\u2C81\u2C83\u2C85\u2C87\u2C89\u2C8B\u2C8D\u2C8F\u2C91\u2C93\u2C95\u2C97\u2C99\u2C9B\u2C9D\u2C9F\u2CA1\u2CA3\u2CA5\u2CA7\u2CA9\u2CAB\u2CAD\u2CAF\u2CB1\u2CB3\u2CB5\u2CB7\u2CB9\u2CBB\u2CBD\u2CBF\u2CC1\u2CC3\u2CC5\u2CC7\u2CC9\u2CCB\u2CCD\u2CCF\u2CD1\u2CD3\u2CD5\u2CD7\u2CD9\u2CDB\u2CDD\u2CDF\u2CE1\u2CE3\u2CE4\u2CEC\u2CEE\u2CF3\u2D00-\u2D25\u2D27\u2D2D\uA641\uA643\uA645\uA647\uA649\uA64B\uA64D\uA64F\uA651\uA653\uA655\uA657\uA659\uA65B\uA65D\uA65F\uA661\uA663\uA665\uA667\uA669\uA66B\uA66D\uA681\uA683\uA685\uA687\uA689\uA68B\uA68D\uA68F\uA691\uA693\uA695\uA697\uA699\uA69B\uA723\uA725\uA727\uA729\uA72B\uA72D\uA72F-\uA731\uA733\uA735\uA737\uA739\uA73B\uA73D\uA73F\uA741\uA743\uA745\uA747\uA749\uA74B\uA74D\uA74F\uA751\uA753\uA755\uA757\uA759\uA75B\uA75D\uA75F\uA761\uA763\uA765\uA767\uA769\uA76B\uA76D\uA76F\uA771-\uA778\uA77A\uA77C\uA77F\uA781\uA783\uA785\uA787\uA78C\uA78E\uA791\uA793-\uA795\uA797\uA799\uA79B\uA79D\uA79F\uA7A1\uA7A3\uA7A5\uA7A7\uA7A9\uA7B5\uA7B7\uA7FA\uAB30-\uAB5A\uAB60-\uAB65\uAB70-\uABBF\uFB00-\uFB06\uFB13-\uFB17\uFF41-\uFF5A0-9\xB2\xB3\xB9\xBC-\xBE\u0660-\u0669\u06F0-\u06F9\u07C0-\u07C9\u0966-\u096F\u09E6-\u09EF\u09F4-\u09F9\u0A66-\u0A6F\u0AE6-\u0AEF\u0B66-\u0B6F\u0B72-\u0B77\u0BE6-\u0BF2\u0C66-\u0C6F\u0C78-\u0C7E\u0CE6-\u0CEF\u0D66-\u0D75\u0DE6-\u0DEF\u0E50-\u0E59\u0ED0-\u0ED9\u0F20-\u0F33\u1040-\u1049\u1090-\u1099\u1369-\u137C\u16EE-\u16F0\u17E0-\u17E9\u17F0-\u17F9\u1810-\u1819\u1946-\u194F\u19D0-\u19DA\u1A80-\u1A89\u1A90-\u1A99\u1B50-\u1B59\u1BB0-\u1BB9\u1C40-\u1C49\u1C50-\u1C59\u2070\u2074-\u2079\u2080-\u2089\u2150-\u2182\u2185-\u2189\u2460-\u249B\u24EA-\u24FF\u2776-\u2793\u2CFD\u3007\u3021-\u3029\u3038-\u303A\u3192-\u3195\u3220-\u3229\u3248-\u324F\u3251-\u325F\u3280-\u3289\u32B1-\u32BF\uA620-\uA629\uA6E6-\uA6EF\uA830-\uA835\uA8D0-\uA8D9\uA900-\uA909\uA9D0-\uA9D9\uA9F0-\uA9F9\uAA50-\uAA59\uABF0-\uABF9\uFF10-\uFF19])([A-Z\xC0-\xD6\xD8-\xDE\u0100\u0102\u0104\u0106\u0108\u010A\u010C\u010E\u0110\u0112\u0114\u0116\u0118\u011A\u011C\u011E\u0120\u0122\u0124\u0126\u0128\u012A\u012C\u012E\u0130\u0132\u0134\u0136\u0139\u013B\u013D\u013F\u0141\u0143\u0145\u0147\u014A\u014C\u014E\u0150\u0152\u0154\u0156\u0158\u015A\u015C\u015E\u0160\u0162\u0164\u0166\u0168\u016A\u016C\u016E\u0170\u0172\u0174\u0176\u0178\u0179\u017B\u017D\u0181\u0182\u0184\u0186\u0187\u0189-\u018B\u018E-\u0191\u0193\u0194\u0196-\u0198\u019C\u019D\u019F\u01A0\u01A2\u01A4\u01A6\u01A7\u01A9\u01AC\u01AE\u01AF\u01B1-\u01B3\u01B5\u01B7\u01B8\u01BC\u01C4\u01C7\u01CA\u01CD\u01CF\u01D1\u01D3\u01D5\u01D7\u01D9\u01DB\u01DE\u01E0\u01E2\u01E4\u01E6\u01E8\u01EA\u01EC\u01EE\u01F1\u01F4\u01F6-\u01F8\u01FA\u01FC\u01FE\u0200\u0202\u0204\u0206\u0208\u020A\u020C\u020E\u0210\u0212\u0214\u0216\u0218\u021A\u021C\u021E\u0220\u0222\u0224\u0226\u0228\u022A\u022C\u022E\u0230\u0232\u023A\u023B\u023D\u023E\u0241\u0243-\u0246\u0248\u024A\u024C\u024E\u0370\u0372\u0376\u037F\u0386\u0388-\u038A\u038C\u038E\u038F\u0391-\u03A1\u03A3-\u03AB\u03CF\u03D2-\u03D4\u03D8\u03DA\u03DC\u03DE\u03E0\u03E2\u03E4\u03E6\u03E8\u03EA\u03EC\u03EE\u03F4\u03F7\u03F9\u03FA\u03FD-\u042F\u0460\u0462\u0464\u0466\u0468\u046A\u046C\u046E\u0470\u0472\u0474\u0476\u0478\u047A\u047C\u047E\u0480\u048A\u048C\u048E\u0490\u0492\u0494\u0496\u0498\u049A\u049C\u049E\u04A0\u04A2\u04A4\u04A6\u04A8\u04AA\u04AC\u04AE\u04B0\u04B2\u04B4\u04B6\u04B8\u04BA\u04BC\u04BE\u04C0\u04C1\u04C3\u04C5\u04C7\u04C9\u04CB\u04CD\u04D0\u04D2\u04D4\u04D6\u04D8\u04DA\u04DC\u04DE\u04E0\u04E2\u04E4\u04E6\u04E8\u04EA\u04EC\u04EE\u04F0\u04F2\u04F4\u04F6\u04F8\u04FA\u04FC\u04FE\u0500\u0502\u0504\u0506\u0508\u050A\u050C\u050E\u0510\u0512\u0514\u0516\u0518\u051A\u051C\u051E\u0520\u0522\u0524\u0526\u0528\u052A\u052C\u052E\u0531-\u0556\u10A0-\u10C5\u10C7\u10CD\u13A0-\u13F5\u1E00\u1E02\u1E04\u1E06\u1E08\u1E0A\u1E0C\u1E0E\u1E10\u1E12\u1E14\u1E16\u1E18\u1E1A\u1E1C\u1E1E\u1E20\u1E22\u1E24\u1E26\u1E28\u1E2A\u1E2C\u1E2E\u1E30\u1E32\u1E34\u1E36\u1E38\u1E3A\u1E3C\u1E3E\u1E40\u1E42\u1E44\u1E46\u1E48\u1E4A\u1E4C\u1E4E\u1E50\u1E52\u1E54\u1E56\u1E58\u1E5A\u1E5C\u1E5E\u1E60\u1E62\u1E64\u1E66\u1E68\u1E6A\u1E6C\u1E6E\u1E70\u1E72\u1E74\u1E76\u1E78\u1E7A\u1E7C\u1E7E\u1E80\u1E82\u1E84\u1E86\u1E88\u1E8A\u1E8C\u1E8E\u1E90\u1E92\u1E94\u1E9E\u1EA0\u1EA2\u1EA4\u1EA6\u1EA8\u1EAA\u1EAC\u1EAE\u1EB0\u1EB2\u1EB4\u1EB6\u1EB8\u1EBA\u1EBC\u1EBE\u1EC0\u1EC2\u1EC4\u1EC6\u1EC8\u1ECA\u1ECC\u1ECE\u1ED0\u1ED2\u1ED4\u1ED6\u1ED8\u1EDA\u1EDC\u1EDE\u1EE0\u1EE2\u1EE4\u1EE6\u1EE8\u1EEA\u1EEC\u1EEE\u1EF0\u1EF2\u1EF4\u1EF6\u1EF8\u1EFA\u1EFC\u1EFE\u1F08-\u1F0F\u1F18-\u1F1D\u1F28-\u1F2F\u1F38-\u1F3F\u1F48-\u1F4D\u1F59\u1F5B\u1F5D\u1F5F\u1F68-\u1F6F\u1FB8-\u1FBB\u1FC8-\u1FCB\u1FD8-\u1FDB\u1FE8-\u1FEC\u1FF8-\u1FFB\u2102\u2107\u210B-\u210D\u2110-\u2112\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u2130-\u2133\u213E\u213F\u2145\u2183\u2C00-\u2C2E\u2C60\u2C62-\u2C64\u2C67\u2C69\u2C6B\u2C6D-\u2C70\u2C72\u2C75\u2C7E-\u2C80\u2C82\u2C84\u2C86\u2C88\u2C8A\u2C8C\u2C8E\u2C90\u2C92\u2C94\u2C96\u2C98\u2C9A\u2C9C\u2C9E\u2CA0\u2CA2\u2CA4\u2CA6\u2CA8\u2CAA\u2CAC\u2CAE\u2CB0\u2CB2\u2CB4\u2CB6\u2CB8\u2CBA\u2CBC\u2CBE\u2CC0\u2CC2\u2CC4\u2CC6\u2CC8\u2CCA\u2CCC\u2CCE\u2CD0\u2CD2\u2CD4\u2CD6\u2CD8\u2CDA\u2CDC\u2CDE\u2CE0\u2CE2\u2CEB\u2CED\u2CF2\uA640\uA642\uA644\uA646\uA648\uA64A\uA64C\uA64E\uA650\uA652\uA654\uA656\uA658\uA65A\uA65C\uA65E\uA660\uA662\uA664\uA666\uA668\uA66A\uA66C\uA680\uA682\uA684\uA686\uA688\uA68A\uA68C\uA68E\uA690\uA692\uA694\uA696\uA698\uA69A\uA722\uA724\uA726\uA728\uA72A\uA72C\uA72E\uA732\uA734\uA736\uA738\uA73A\uA73C\uA73E\uA740\uA742\uA744\uA746\uA748\uA74A\uA74C\uA74E\uA750\uA752\uA754\uA756\uA758\uA75A\uA75C\uA75E\uA760\uA762\uA764\uA766\uA768\uA76A\uA76C\uA76E\uA779\uA77B\uA77D\uA77E\uA780\uA782\uA784\uA786\uA78B\uA78D\uA790\uA792\uA796\uA798\uA79A\uA79C\uA79E\uA7A0\uA7A2\uA7A4\uA7A6\uA7A8\uA7AA-\uA7AD\uA7B0-\uA7B4\uA7B6\uFF21-\uFF3A])/g;

},{}],25:[function(require,module,exports){
"use strict";

module.exports = /([A-Z\xC0-\xD6\xD8-\xDE\u0100\u0102\u0104\u0106\u0108\u010A\u010C\u010E\u0110\u0112\u0114\u0116\u0118\u011A\u011C\u011E\u0120\u0122\u0124\u0126\u0128\u012A\u012C\u012E\u0130\u0132\u0134\u0136\u0139\u013B\u013D\u013F\u0141\u0143\u0145\u0147\u014A\u014C\u014E\u0150\u0152\u0154\u0156\u0158\u015A\u015C\u015E\u0160\u0162\u0164\u0166\u0168\u016A\u016C\u016E\u0170\u0172\u0174\u0176\u0178\u0179\u017B\u017D\u0181\u0182\u0184\u0186\u0187\u0189-\u018B\u018E-\u0191\u0193\u0194\u0196-\u0198\u019C\u019D\u019F\u01A0\u01A2\u01A4\u01A6\u01A7\u01A9\u01AC\u01AE\u01AF\u01B1-\u01B3\u01B5\u01B7\u01B8\u01BC\u01C4\u01C7\u01CA\u01CD\u01CF\u01D1\u01D3\u01D5\u01D7\u01D9\u01DB\u01DE\u01E0\u01E2\u01E4\u01E6\u01E8\u01EA\u01EC\u01EE\u01F1\u01F4\u01F6-\u01F8\u01FA\u01FC\u01FE\u0200\u0202\u0204\u0206\u0208\u020A\u020C\u020E\u0210\u0212\u0214\u0216\u0218\u021A\u021C\u021E\u0220\u0222\u0224\u0226\u0228\u022A\u022C\u022E\u0230\u0232\u023A\u023B\u023D\u023E\u0241\u0243-\u0246\u0248\u024A\u024C\u024E\u0370\u0372\u0376\u037F\u0386\u0388-\u038A\u038C\u038E\u038F\u0391-\u03A1\u03A3-\u03AB\u03CF\u03D2-\u03D4\u03D8\u03DA\u03DC\u03DE\u03E0\u03E2\u03E4\u03E6\u03E8\u03EA\u03EC\u03EE\u03F4\u03F7\u03F9\u03FA\u03FD-\u042F\u0460\u0462\u0464\u0466\u0468\u046A\u046C\u046E\u0470\u0472\u0474\u0476\u0478\u047A\u047C\u047E\u0480\u048A\u048C\u048E\u0490\u0492\u0494\u0496\u0498\u049A\u049C\u049E\u04A0\u04A2\u04A4\u04A6\u04A8\u04AA\u04AC\u04AE\u04B0\u04B2\u04B4\u04B6\u04B8\u04BA\u04BC\u04BE\u04C0\u04C1\u04C3\u04C5\u04C7\u04C9\u04CB\u04CD\u04D0\u04D2\u04D4\u04D6\u04D8\u04DA\u04DC\u04DE\u04E0\u04E2\u04E4\u04E6\u04E8\u04EA\u04EC\u04EE\u04F0\u04F2\u04F4\u04F6\u04F8\u04FA\u04FC\u04FE\u0500\u0502\u0504\u0506\u0508\u050A\u050C\u050E\u0510\u0512\u0514\u0516\u0518\u051A\u051C\u051E\u0520\u0522\u0524\u0526\u0528\u052A\u052C\u052E\u0531-\u0556\u10A0-\u10C5\u10C7\u10CD\u13A0-\u13F5\u1E00\u1E02\u1E04\u1E06\u1E08\u1E0A\u1E0C\u1E0E\u1E10\u1E12\u1E14\u1E16\u1E18\u1E1A\u1E1C\u1E1E\u1E20\u1E22\u1E24\u1E26\u1E28\u1E2A\u1E2C\u1E2E\u1E30\u1E32\u1E34\u1E36\u1E38\u1E3A\u1E3C\u1E3E\u1E40\u1E42\u1E44\u1E46\u1E48\u1E4A\u1E4C\u1E4E\u1E50\u1E52\u1E54\u1E56\u1E58\u1E5A\u1E5C\u1E5E\u1E60\u1E62\u1E64\u1E66\u1E68\u1E6A\u1E6C\u1E6E\u1E70\u1E72\u1E74\u1E76\u1E78\u1E7A\u1E7C\u1E7E\u1E80\u1E82\u1E84\u1E86\u1E88\u1E8A\u1E8C\u1E8E\u1E90\u1E92\u1E94\u1E9E\u1EA0\u1EA2\u1EA4\u1EA6\u1EA8\u1EAA\u1EAC\u1EAE\u1EB0\u1EB2\u1EB4\u1EB6\u1EB8\u1EBA\u1EBC\u1EBE\u1EC0\u1EC2\u1EC4\u1EC6\u1EC8\u1ECA\u1ECC\u1ECE\u1ED0\u1ED2\u1ED4\u1ED6\u1ED8\u1EDA\u1EDC\u1EDE\u1EE0\u1EE2\u1EE4\u1EE6\u1EE8\u1EEA\u1EEC\u1EEE\u1EF0\u1EF2\u1EF4\u1EF6\u1EF8\u1EFA\u1EFC\u1EFE\u1F08-\u1F0F\u1F18-\u1F1D\u1F28-\u1F2F\u1F38-\u1F3F\u1F48-\u1F4D\u1F59\u1F5B\u1F5D\u1F5F\u1F68-\u1F6F\u1FB8-\u1FBB\u1FC8-\u1FCB\u1FD8-\u1FDB\u1FE8-\u1FEC\u1FF8-\u1FFB\u2102\u2107\u210B-\u210D\u2110-\u2112\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u2130-\u2133\u213E\u213F\u2145\u2183\u2C00-\u2C2E\u2C60\u2C62-\u2C64\u2C67\u2C69\u2C6B\u2C6D-\u2C70\u2C72\u2C75\u2C7E-\u2C80\u2C82\u2C84\u2C86\u2C88\u2C8A\u2C8C\u2C8E\u2C90\u2C92\u2C94\u2C96\u2C98\u2C9A\u2C9C\u2C9E\u2CA0\u2CA2\u2CA4\u2CA6\u2CA8\u2CAA\u2CAC\u2CAE\u2CB0\u2CB2\u2CB4\u2CB6\u2CB8\u2CBA\u2CBC\u2CBE\u2CC0\u2CC2\u2CC4\u2CC6\u2CC8\u2CCA\u2CCC\u2CCE\u2CD0\u2CD2\u2CD4\u2CD6\u2CD8\u2CDA\u2CDC\u2CDE\u2CE0\u2CE2\u2CEB\u2CED\u2CF2\uA640\uA642\uA644\uA646\uA648\uA64A\uA64C\uA64E\uA650\uA652\uA654\uA656\uA658\uA65A\uA65C\uA65E\uA660\uA662\uA664\uA666\uA668\uA66A\uA66C\uA680\uA682\uA684\uA686\uA688\uA68A\uA68C\uA68E\uA690\uA692\uA694\uA696\uA698\uA69A\uA722\uA724\uA726\uA728\uA72A\uA72C\uA72E\uA732\uA734\uA736\uA738\uA73A\uA73C\uA73E\uA740\uA742\uA744\uA746\uA748\uA74A\uA74C\uA74E\uA750\uA752\uA754\uA756\uA758\uA75A\uA75C\uA75E\uA760\uA762\uA764\uA766\uA768\uA76A\uA76C\uA76E\uA779\uA77B\uA77D\uA77E\uA780\uA782\uA784\uA786\uA78B\uA78D\uA790\uA792\uA796\uA798\uA79A\uA79C\uA79E\uA7A0\uA7A2\uA7A4\uA7A6\uA7A8\uA7AA-\uA7AD\uA7B0-\uA7B4\uA7B6\uFF21-\uFF3A])([A-Z\xC0-\xD6\xD8-\xDE\u0100\u0102\u0104\u0106\u0108\u010A\u010C\u010E\u0110\u0112\u0114\u0116\u0118\u011A\u011C\u011E\u0120\u0122\u0124\u0126\u0128\u012A\u012C\u012E\u0130\u0132\u0134\u0136\u0139\u013B\u013D\u013F\u0141\u0143\u0145\u0147\u014A\u014C\u014E\u0150\u0152\u0154\u0156\u0158\u015A\u015C\u015E\u0160\u0162\u0164\u0166\u0168\u016A\u016C\u016E\u0170\u0172\u0174\u0176\u0178\u0179\u017B\u017D\u0181\u0182\u0184\u0186\u0187\u0189-\u018B\u018E-\u0191\u0193\u0194\u0196-\u0198\u019C\u019D\u019F\u01A0\u01A2\u01A4\u01A6\u01A7\u01A9\u01AC\u01AE\u01AF\u01B1-\u01B3\u01B5\u01B7\u01B8\u01BC\u01C4\u01C7\u01CA\u01CD\u01CF\u01D1\u01D3\u01D5\u01D7\u01D9\u01DB\u01DE\u01E0\u01E2\u01E4\u01E6\u01E8\u01EA\u01EC\u01EE\u01F1\u01F4\u01F6-\u01F8\u01FA\u01FC\u01FE\u0200\u0202\u0204\u0206\u0208\u020A\u020C\u020E\u0210\u0212\u0214\u0216\u0218\u021A\u021C\u021E\u0220\u0222\u0224\u0226\u0228\u022A\u022C\u022E\u0230\u0232\u023A\u023B\u023D\u023E\u0241\u0243-\u0246\u0248\u024A\u024C\u024E\u0370\u0372\u0376\u037F\u0386\u0388-\u038A\u038C\u038E\u038F\u0391-\u03A1\u03A3-\u03AB\u03CF\u03D2-\u03D4\u03D8\u03DA\u03DC\u03DE\u03E0\u03E2\u03E4\u03E6\u03E8\u03EA\u03EC\u03EE\u03F4\u03F7\u03F9\u03FA\u03FD-\u042F\u0460\u0462\u0464\u0466\u0468\u046A\u046C\u046E\u0470\u0472\u0474\u0476\u0478\u047A\u047C\u047E\u0480\u048A\u048C\u048E\u0490\u0492\u0494\u0496\u0498\u049A\u049C\u049E\u04A0\u04A2\u04A4\u04A6\u04A8\u04AA\u04AC\u04AE\u04B0\u04B2\u04B4\u04B6\u04B8\u04BA\u04BC\u04BE\u04C0\u04C1\u04C3\u04C5\u04C7\u04C9\u04CB\u04CD\u04D0\u04D2\u04D4\u04D6\u04D8\u04DA\u04DC\u04DE\u04E0\u04E2\u04E4\u04E6\u04E8\u04EA\u04EC\u04EE\u04F0\u04F2\u04F4\u04F6\u04F8\u04FA\u04FC\u04FE\u0500\u0502\u0504\u0506\u0508\u050A\u050C\u050E\u0510\u0512\u0514\u0516\u0518\u051A\u051C\u051E\u0520\u0522\u0524\u0526\u0528\u052A\u052C\u052E\u0531-\u0556\u10A0-\u10C5\u10C7\u10CD\u13A0-\u13F5\u1E00\u1E02\u1E04\u1E06\u1E08\u1E0A\u1E0C\u1E0E\u1E10\u1E12\u1E14\u1E16\u1E18\u1E1A\u1E1C\u1E1E\u1E20\u1E22\u1E24\u1E26\u1E28\u1E2A\u1E2C\u1E2E\u1E30\u1E32\u1E34\u1E36\u1E38\u1E3A\u1E3C\u1E3E\u1E40\u1E42\u1E44\u1E46\u1E48\u1E4A\u1E4C\u1E4E\u1E50\u1E52\u1E54\u1E56\u1E58\u1E5A\u1E5C\u1E5E\u1E60\u1E62\u1E64\u1E66\u1E68\u1E6A\u1E6C\u1E6E\u1E70\u1E72\u1E74\u1E76\u1E78\u1E7A\u1E7C\u1E7E\u1E80\u1E82\u1E84\u1E86\u1E88\u1E8A\u1E8C\u1E8E\u1E90\u1E92\u1E94\u1E9E\u1EA0\u1EA2\u1EA4\u1EA6\u1EA8\u1EAA\u1EAC\u1EAE\u1EB0\u1EB2\u1EB4\u1EB6\u1EB8\u1EBA\u1EBC\u1EBE\u1EC0\u1EC2\u1EC4\u1EC6\u1EC8\u1ECA\u1ECC\u1ECE\u1ED0\u1ED2\u1ED4\u1ED6\u1ED8\u1EDA\u1EDC\u1EDE\u1EE0\u1EE2\u1EE4\u1EE6\u1EE8\u1EEA\u1EEC\u1EEE\u1EF0\u1EF2\u1EF4\u1EF6\u1EF8\u1EFA\u1EFC\u1EFE\u1F08-\u1F0F\u1F18-\u1F1D\u1F28-\u1F2F\u1F38-\u1F3F\u1F48-\u1F4D\u1F59\u1F5B\u1F5D\u1F5F\u1F68-\u1F6F\u1FB8-\u1FBB\u1FC8-\u1FCB\u1FD8-\u1FDB\u1FE8-\u1FEC\u1FF8-\u1FFB\u2102\u2107\u210B-\u210D\u2110-\u2112\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u2130-\u2133\u213E\u213F\u2145\u2183\u2C00-\u2C2E\u2C60\u2C62-\u2C64\u2C67\u2C69\u2C6B\u2C6D-\u2C70\u2C72\u2C75\u2C7E-\u2C80\u2C82\u2C84\u2C86\u2C88\u2C8A\u2C8C\u2C8E\u2C90\u2C92\u2C94\u2C96\u2C98\u2C9A\u2C9C\u2C9E\u2CA0\u2CA2\u2CA4\u2CA6\u2CA8\u2CAA\u2CAC\u2CAE\u2CB0\u2CB2\u2CB4\u2CB6\u2CB8\u2CBA\u2CBC\u2CBE\u2CC0\u2CC2\u2CC4\u2CC6\u2CC8\u2CCA\u2CCC\u2CCE\u2CD0\u2CD2\u2CD4\u2CD6\u2CD8\u2CDA\u2CDC\u2CDE\u2CE0\u2CE2\u2CEB\u2CED\u2CF2\uA640\uA642\uA644\uA646\uA648\uA64A\uA64C\uA64E\uA650\uA652\uA654\uA656\uA658\uA65A\uA65C\uA65E\uA660\uA662\uA664\uA666\uA668\uA66A\uA66C\uA680\uA682\uA684\uA686\uA688\uA68A\uA68C\uA68E\uA690\uA692\uA694\uA696\uA698\uA69A\uA722\uA724\uA726\uA728\uA72A\uA72C\uA72E\uA732\uA734\uA736\uA738\uA73A\uA73C\uA73E\uA740\uA742\uA744\uA746\uA748\uA74A\uA74C\uA74E\uA750\uA752\uA754\uA756\uA758\uA75A\uA75C\uA75E\uA760\uA762\uA764\uA766\uA768\uA76A\uA76C\uA76E\uA779\uA77B\uA77D\uA77E\uA780\uA782\uA784\uA786\uA78B\uA78D\uA790\uA792\uA796\uA798\uA79A\uA79C\uA79E\uA7A0\uA7A2\uA7A4\uA7A6\uA7A8\uA7AA-\uA7AD\uA7B0-\uA7B4\uA7B6\uFF21-\uFF3A][a-z\xB5\xDF-\xF6\xF8-\xFF\u0101\u0103\u0105\u0107\u0109\u010B\u010D\u010F\u0111\u0113\u0115\u0117\u0119\u011B\u011D\u011F\u0121\u0123\u0125\u0127\u0129\u012B\u012D\u012F\u0131\u0133\u0135\u0137\u0138\u013A\u013C\u013E\u0140\u0142\u0144\u0146\u0148\u0149\u014B\u014D\u014F\u0151\u0153\u0155\u0157\u0159\u015B\u015D\u015F\u0161\u0163\u0165\u0167\u0169\u016B\u016D\u016F\u0171\u0173\u0175\u0177\u017A\u017C\u017E-\u0180\u0183\u0185\u0188\u018C\u018D\u0192\u0195\u0199-\u019B\u019E\u01A1\u01A3\u01A5\u01A8\u01AA\u01AB\u01AD\u01B0\u01B4\u01B6\u01B9\u01BA\u01BD-\u01BF\u01C6\u01C9\u01CC\u01CE\u01D0\u01D2\u01D4\u01D6\u01D8\u01DA\u01DC\u01DD\u01DF\u01E1\u01E3\u01E5\u01E7\u01E9\u01EB\u01ED\u01EF\u01F0\u01F3\u01F5\u01F9\u01FB\u01FD\u01FF\u0201\u0203\u0205\u0207\u0209\u020B\u020D\u020F\u0211\u0213\u0215\u0217\u0219\u021B\u021D\u021F\u0221\u0223\u0225\u0227\u0229\u022B\u022D\u022F\u0231\u0233-\u0239\u023C\u023F\u0240\u0242\u0247\u0249\u024B\u024D\u024F-\u0293\u0295-\u02AF\u0371\u0373\u0377\u037B-\u037D\u0390\u03AC-\u03CE\u03D0\u03D1\u03D5-\u03D7\u03D9\u03DB\u03DD\u03DF\u03E1\u03E3\u03E5\u03E7\u03E9\u03EB\u03ED\u03EF-\u03F3\u03F5\u03F8\u03FB\u03FC\u0430-\u045F\u0461\u0463\u0465\u0467\u0469\u046B\u046D\u046F\u0471\u0473\u0475\u0477\u0479\u047B\u047D\u047F\u0481\u048B\u048D\u048F\u0491\u0493\u0495\u0497\u0499\u049B\u049D\u049F\u04A1\u04A3\u04A5\u04A7\u04A9\u04AB\u04AD\u04AF\u04B1\u04B3\u04B5\u04B7\u04B9\u04BB\u04BD\u04BF\u04C2\u04C4\u04C6\u04C8\u04CA\u04CC\u04CE\u04CF\u04D1\u04D3\u04D5\u04D7\u04D9\u04DB\u04DD\u04DF\u04E1\u04E3\u04E5\u04E7\u04E9\u04EB\u04ED\u04EF\u04F1\u04F3\u04F5\u04F7\u04F9\u04FB\u04FD\u04FF\u0501\u0503\u0505\u0507\u0509\u050B\u050D\u050F\u0511\u0513\u0515\u0517\u0519\u051B\u051D\u051F\u0521\u0523\u0525\u0527\u0529\u052B\u052D\u052F\u0561-\u0587\u13F8-\u13FD\u1D00-\u1D2B\u1D6B-\u1D77\u1D79-\u1D9A\u1E01\u1E03\u1E05\u1E07\u1E09\u1E0B\u1E0D\u1E0F\u1E11\u1E13\u1E15\u1E17\u1E19\u1E1B\u1E1D\u1E1F\u1E21\u1E23\u1E25\u1E27\u1E29\u1E2B\u1E2D\u1E2F\u1E31\u1E33\u1E35\u1E37\u1E39\u1E3B\u1E3D\u1E3F\u1E41\u1E43\u1E45\u1E47\u1E49\u1E4B\u1E4D\u1E4F\u1E51\u1E53\u1E55\u1E57\u1E59\u1E5B\u1E5D\u1E5F\u1E61\u1E63\u1E65\u1E67\u1E69\u1E6B\u1E6D\u1E6F\u1E71\u1E73\u1E75\u1E77\u1E79\u1E7B\u1E7D\u1E7F\u1E81\u1E83\u1E85\u1E87\u1E89\u1E8B\u1E8D\u1E8F\u1E91\u1E93\u1E95-\u1E9D\u1E9F\u1EA1\u1EA3\u1EA5\u1EA7\u1EA9\u1EAB\u1EAD\u1EAF\u1EB1\u1EB3\u1EB5\u1EB7\u1EB9\u1EBB\u1EBD\u1EBF\u1EC1\u1EC3\u1EC5\u1EC7\u1EC9\u1ECB\u1ECD\u1ECF\u1ED1\u1ED3\u1ED5\u1ED7\u1ED9\u1EDB\u1EDD\u1EDF\u1EE1\u1EE3\u1EE5\u1EE7\u1EE9\u1EEB\u1EED\u1EEF\u1EF1\u1EF3\u1EF5\u1EF7\u1EF9\u1EFB\u1EFD\u1EFF-\u1F07\u1F10-\u1F15\u1F20-\u1F27\u1F30-\u1F37\u1F40-\u1F45\u1F50-\u1F57\u1F60-\u1F67\u1F70-\u1F7D\u1F80-\u1F87\u1F90-\u1F97\u1FA0-\u1FA7\u1FB0-\u1FB4\u1FB6\u1FB7\u1FBE\u1FC2-\u1FC4\u1FC6\u1FC7\u1FD0-\u1FD3\u1FD6\u1FD7\u1FE0-\u1FE7\u1FF2-\u1FF4\u1FF6\u1FF7\u210A\u210E\u210F\u2113\u212F\u2134\u2139\u213C\u213D\u2146-\u2149\u214E\u2184\u2C30-\u2C5E\u2C61\u2C65\u2C66\u2C68\u2C6A\u2C6C\u2C71\u2C73\u2C74\u2C76-\u2C7B\u2C81\u2C83\u2C85\u2C87\u2C89\u2C8B\u2C8D\u2C8F\u2C91\u2C93\u2C95\u2C97\u2C99\u2C9B\u2C9D\u2C9F\u2CA1\u2CA3\u2CA5\u2CA7\u2CA9\u2CAB\u2CAD\u2CAF\u2CB1\u2CB3\u2CB5\u2CB7\u2CB9\u2CBB\u2CBD\u2CBF\u2CC1\u2CC3\u2CC5\u2CC7\u2CC9\u2CCB\u2CCD\u2CCF\u2CD1\u2CD3\u2CD5\u2CD7\u2CD9\u2CDB\u2CDD\u2CDF\u2CE1\u2CE3\u2CE4\u2CEC\u2CEE\u2CF3\u2D00-\u2D25\u2D27\u2D2D\uA641\uA643\uA645\uA647\uA649\uA64B\uA64D\uA64F\uA651\uA653\uA655\uA657\uA659\uA65B\uA65D\uA65F\uA661\uA663\uA665\uA667\uA669\uA66B\uA66D\uA681\uA683\uA685\uA687\uA689\uA68B\uA68D\uA68F\uA691\uA693\uA695\uA697\uA699\uA69B\uA723\uA725\uA727\uA729\uA72B\uA72D\uA72F-\uA731\uA733\uA735\uA737\uA739\uA73B\uA73D\uA73F\uA741\uA743\uA745\uA747\uA749\uA74B\uA74D\uA74F\uA751\uA753\uA755\uA757\uA759\uA75B\uA75D\uA75F\uA761\uA763\uA765\uA767\uA769\uA76B\uA76D\uA76F\uA771-\uA778\uA77A\uA77C\uA77F\uA781\uA783\uA785\uA787\uA78C\uA78E\uA791\uA793-\uA795\uA797\uA799\uA79B\uA79D\uA79F\uA7A1\uA7A3\uA7A5\uA7A7\uA7A9\uA7B5\uA7B7\uA7FA\uAB30-\uAB5A\uAB60-\uAB65\uAB70-\uABBF\uFB00-\uFB06\uFB13-\uFB17\uFF41-\uFF5A])/g;

},{}],26:[function(require,module,exports){
"use strict";

module.exports = /[^A-Za-z\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0-\u08B4\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16F1-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2183\u2184\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005\u3006\u3031-\u3035\u303B\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6E5\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AD\uA7B0-\uA7B7\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC0-9\xB2\xB3\xB9\xBC-\xBE\u0660-\u0669\u06F0-\u06F9\u07C0-\u07C9\u0966-\u096F\u09E6-\u09EF\u09F4-\u09F9\u0A66-\u0A6F\u0AE6-\u0AEF\u0B66-\u0B6F\u0B72-\u0B77\u0BE6-\u0BF2\u0C66-\u0C6F\u0C78-\u0C7E\u0CE6-\u0CEF\u0D66-\u0D75\u0DE6-\u0DEF\u0E50-\u0E59\u0ED0-\u0ED9\u0F20-\u0F33\u1040-\u1049\u1090-\u1099\u1369-\u137C\u16EE-\u16F0\u17E0-\u17E9\u17F0-\u17F9\u1810-\u1819\u1946-\u194F\u19D0-\u19DA\u1A80-\u1A89\u1A90-\u1A99\u1B50-\u1B59\u1BB0-\u1BB9\u1C40-\u1C49\u1C50-\u1C59\u2070\u2074-\u2079\u2080-\u2089\u2150-\u2182\u2185-\u2189\u2460-\u249B\u24EA-\u24FF\u2776-\u2793\u2CFD\u3007\u3021-\u3029\u3038-\u303A\u3192-\u3195\u3220-\u3229\u3248-\u324F\u3251-\u325F\u3280-\u3289\u32B1-\u32BF\uA620-\uA629\uA6E6-\uA6EF\uA830-\uA835\uA8D0-\uA8D9\uA900-\uA909\uA9D0-\uA9D9\uA9F0-\uA9F9\uAA50-\uAA59\uABF0-\uABF9\uFF10-\uFF19]+/g;

},{}],27:[function(require,module,exports){
"use strict";

// shim for using process in browser
var process = module.exports = {}; // cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
  throw new Error('setTimeout has not been defined');
}

function defaultClearTimeout() {
  throw new Error('clearTimeout has not been defined');
}

(function () {
  try {
    if (typeof setTimeout === 'function') {
      cachedSetTimeout = setTimeout;
    } else {
      cachedSetTimeout = defaultSetTimout;
    }
  } catch (e) {
    cachedSetTimeout = defaultSetTimout;
  }

  try {
    if (typeof clearTimeout === 'function') {
      cachedClearTimeout = clearTimeout;
    } else {
      cachedClearTimeout = defaultClearTimeout;
    }
  } catch (e) {
    cachedClearTimeout = defaultClearTimeout;
  }
})();

function runTimeout(fun) {
  if (cachedSetTimeout === setTimeout) {
    //normal enviroments in sane situations
    return setTimeout(fun, 0);
  } // if setTimeout wasn't available but was latter defined


  if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
    cachedSetTimeout = setTimeout;
    return setTimeout(fun, 0);
  }

  try {
    // when when somebody has screwed with setTimeout but no I.E. maddness
    return cachedSetTimeout(fun, 0);
  } catch (e) {
    try {
      // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
      return cachedSetTimeout.call(null, fun, 0);
    } catch (e) {
      // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
      return cachedSetTimeout.call(this, fun, 0);
    }
  }
}

function runClearTimeout(marker) {
  if (cachedClearTimeout === clearTimeout) {
    //normal enviroments in sane situations
    return clearTimeout(marker);
  } // if clearTimeout wasn't available but was latter defined


  if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
    cachedClearTimeout = clearTimeout;
    return clearTimeout(marker);
  }

  try {
    // when when somebody has screwed with setTimeout but no I.E. maddness
    return cachedClearTimeout(marker);
  } catch (e) {
    try {
      // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
      return cachedClearTimeout.call(null, marker);
    } catch (e) {
      // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
      // Some versions of I.E. have different rules for clearTimeout vs setTimeout
      return cachedClearTimeout.call(this, marker);
    }
  }
}

var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
  if (!draining || !currentQueue) {
    return;
  }

  draining = false;

  if (currentQueue.length) {
    queue = currentQueue.concat(queue);
  } else {
    queueIndex = -1;
  }

  if (queue.length) {
    drainQueue();
  }
}

function drainQueue() {
  if (draining) {
    return;
  }

  var timeout = runTimeout(cleanUpNextTick);
  draining = true;
  var len = queue.length;

  while (len) {
    currentQueue = queue;
    queue = [];

    while (++queueIndex < len) {
      if (currentQueue) {
        currentQueue[queueIndex].run();
      }
    }

    queueIndex = -1;
    len = queue.length;
  }

  currentQueue = null;
  draining = false;
  runClearTimeout(timeout);
}

process.nextTick = function (fun) {
  var args = new Array(arguments.length - 1);

  if (arguments.length > 1) {
    for (var i = 1; i < arguments.length; i++) {
      args[i - 1] = arguments[i];
    }
  }

  queue.push(new Item(fun, args));

  if (queue.length === 1 && !draining) {
    runTimeout(drainQueue);
  }
}; // v8 likes predictible objects


function Item(fun, array) {
  this.fun = fun;
  this.array = array;
}

Item.prototype.run = function () {
  this.fun.apply(null, this.array);
};

process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues

process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) {
  return [];
};

process.binding = function (name) {
  throw new Error('process.binding is not supported');
};

process.cwd = function () {
  return '/';
};

process.chdir = function (dir) {
  throw new Error('process.chdir is not supported');
};

process.umask = function () {
  return 0;
};

},{}],28:[function(require,module,exports){
'use strict';

var has = Object.prototype.hasOwnProperty,
    undef;
/**
 * Decode a URI encoded string.
 *
 * @param {String} input The URI encoded string.
 * @returns {String|Null} The decoded string.
 * @api private
 */

function decode(input) {
  try {
    return decodeURIComponent(input.replace(/\+/g, ' '));
  } catch (e) {
    return null;
  }
}
/**
 * Attempts to encode a given input.
 *
 * @param {String} input The string that needs to be encoded.
 * @returns {String|Null} The encoded string.
 * @api private
 */


function encode(input) {
  try {
    return encodeURIComponent(input);
  } catch (e) {
    return null;
  }
}
/**
 * Simple query string parser.
 *
 * @param {String} query The query string that needs to be parsed.
 * @returns {Object}
 * @api public
 */


function querystring(query) {
  var parser = /([^=?&]+)=?([^&]*)/g,
      result = {},
      part;

  while (part = parser.exec(query)) {
    var key = decode(part[1]),
        value = decode(part[2]); //
    // Prevent overriding of existing properties. This ensures that build-in
    // methods like `toString` or __proto__ are not overriden by malicious
    // querystrings.
    //
    // In the case if failed decoding, we want to omit the key/value pairs
    // from the result.
    //

    if (key === null || value === null || key in result) continue;
    result[key] = value;
  }

  return result;
}
/**
 * Transform a query string to an object.
 *
 * @param {Object} obj Object that should be transformed.
 * @param {String} prefix Optional prefix.
 * @returns {String}
 * @api public
 */


function querystringify(obj, prefix) {
  prefix = prefix || '';
  var pairs = [],
      value,
      key; //
  // Optionally prefix with a '?' if needed
  //

  if ('string' !== typeof prefix) prefix = '?';

  for (key in obj) {
    if (has.call(obj, key)) {
      value = obj[key]; //
      // Edge cases where we actually want to encode the value to an empty
      // string instead of the stringified value.
      //

      if (!value && (value === null || value === undef || isNaN(value))) {
        value = '';
      }

      key = encodeURIComponent(key);
      value = encodeURIComponent(value); //
      // If we failed to encode the strings, we should bail out as we don't
      // want to add invalid strings to the query.
      //

      if (key === null || value === null) continue;
      pairs.push(key + '=' + value);
    }
  }

  return pairs.length ? prefix + pairs.join('&') : '';
} //
// Expose the module.
//


exports.stringify = querystringify;
exports.parse = querystring;

},{}],29:[function(require,module,exports){
'use strict';
/**
 * Check if we're required to add a port number.
 *
 * @see https://url.spec.whatwg.org/#default-port
 * @param {Number|String} port Port number we need to check
 * @param {String} protocol Protocol we need to check against.
 * @returns {Boolean} Is it a default port for the given protocol
 * @api private
 */

module.exports = function required(port, protocol) {
  protocol = protocol.split(':')[0];
  port = +port;
  if (!port) return false;

  switch (protocol) {
    case 'http':
    case 'ws':
      return port !== 80;

    case 'https':
    case 'wss':
      return port !== 443;

    case 'ftp':
      return port !== 21;

    case 'gopher':
      return port !== 70;

    case 'file':
      return false;
  }

  return port !== 0;
};

},{}],30:[function(require,module,exports){
'use strict';

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

module.exports = rfdc;

function rfdc(opts) {
  opts = opts || {};
  if (opts.circles) return rfdcCircles(opts);
  return opts.proto ? cloneProto : clone;

  function cloneArray(a, fn) {
    var keys = Object.keys(a);
    var a2 = new Array(keys.length);

    for (var i = 0; i < keys.length; i++) {
      var k = keys[i];
      var cur = a[k];

      if (_typeof(cur) !== 'object' || cur === null) {
        a2[k] = cur;
      } else if (cur instanceof Date) {
        a2[k] = new Date(cur);
      } else {
        a2[k] = fn(cur);
      }
    }

    return a2;
  }

  function clone(o) {
    if (_typeof(o) !== 'object' || o === null) return o;
    if (o instanceof Date) return new Date(o);
    if (Array.isArray(o)) return cloneArray(o, clone);
    var o2 = {};

    for (var k in o) {
      if (Object.hasOwnProperty.call(o, k) === false) continue;
      var cur = o[k];

      if (_typeof(cur) !== 'object' || cur === null) {
        o2[k] = cur;
      } else if (cur instanceof Date) {
        o2[k] = new Date(cur);
      } else {
        o2[k] = clone(cur);
      }
    }

    return o2;
  }

  function cloneProto(o) {
    if (_typeof(o) !== 'object' || o === null) return o;
    if (o instanceof Date) return new Date(o);
    if (Array.isArray(o)) return cloneArray(o, cloneProto);
    var o2 = {};

    for (var k in o) {
      var cur = o[k];

      if (_typeof(cur) !== 'object' || cur === null) {
        o2[k] = cur;
      } else if (cur instanceof Date) {
        o2[k] = new Date(cur);
      } else {
        o2[k] = cloneProto(cur);
      }
    }

    return o2;
  }
}

function rfdcCircles(opts) {
  var refs = [];
  var refsNew = [];
  return opts.proto ? cloneProto : clone;

  function cloneArray(a, fn) {
    var keys = Object.keys(a);
    var a2 = new Array(keys.length);

    for (var i = 0; i < keys.length; i++) {
      var k = keys[i];
      var cur = a[k];

      if (_typeof(cur) !== 'object' || cur === null) {
        a2[k] = cur;
      } else if (cur instanceof Date) {
        a2[k] = new Date(cur);
      } else {
        var index = refs.indexOf(cur);

        if (index !== -1) {
          a2[k] = refsNew[index];
        } else {
          a2[k] = fn(cur);
        }
      }
    }

    return a2;
  }

  function clone(o) {
    if (_typeof(o) !== 'object' || o === null) return o;
    if (o instanceof Date) return new Date(o);
    if (Array.isArray(o)) return cloneArray(o, clone);
    var o2 = {};
    refs.push(o);
    refsNew.push(o2);

    for (var k in o) {
      if (Object.hasOwnProperty.call(o, k) === false) continue;
      var cur = o[k];

      if (_typeof(cur) !== 'object' || cur === null) {
        o2[k] = cur;
      } else if (cur instanceof Date) {
        o2[k] = new Date(cur);
      } else {
        var i = refs.indexOf(cur);

        if (i !== -1) {
          o2[k] = refsNew[i];
        } else {
          o2[k] = clone(cur);
        }
      }
    }

    refs.pop();
    refsNew.pop();
    return o2;
  }

  function cloneProto(o) {
    if (_typeof(o) !== 'object' || o === null) return o;
    if (o instanceof Date) return new Date(o);
    if (Array.isArray(o)) return cloneArray(o, cloneProto);
    var o2 = {};
    refs.push(o);
    refsNew.push(o2);

    for (var k in o) {
      var cur = o[k];

      if (_typeof(cur) !== 'object' || cur === null) {
        o2[k] = cur;
      } else if (cur instanceof Date) {
        o2[k] = new Date(cur);
      } else {
        var i = refs.indexOf(cur);

        if (i !== -1) {
          o2[k] = refsNew[i];
        } else {
          o2[k] = cloneProto(cur);
        }
      }
    }

    refs.pop();
    refsNew.pop();
    return o2;
  }
}

},{}],31:[function(require,module,exports){
module.exports=[
  "_csrf",
  "Csrf",
  "csrf",
  "CSRF",
  "Acc_number",
  "accNumber",
  "accnumber",
  "ACCNUMBER",
  "acc_number",
  "Acc number",
  "Access_token",
  "accessToken",
  "accesstoken",
  "ACCESSTOKEN",
  "access_token",
  "Access token",
  "Account_bank_number",
  "accountBankNumber",
  "accountbanknumber",
  "ACCOUNTBANKNUMBER",
  "account_bank_number",
  "Account bank number",
  "Account_number",
  "accountNumber",
  "accountnumber",
  "ACCOUNTNUMBER",
  "account_number",
  "Account number",
  "Account_routing_number",
  "accountRoutingNumber",
  "accountroutingnumber",
  "ACCOUNTROUTINGNUMBER",
  "account_routing_number",
  "Account routing number",
  "Api_key",
  "apiKey",
  "apikey",
  "APIKEY",
  "api_key",
  "Api key",
  "Api_token",
  "apiToken",
  "apitoken",
  "APITOKEN",
  "api_token",
  "Api token",
  "Auth_token",
  "authToken",
  "authtoken",
  "AUTHTOKEN",
  "auth_token",
  "Auth token",
  "Bank_acc",
  "bankAcc",
  "bankacc",
  "BANKACC",
  "bank_acc",
  "Bank acc",
  "Bank_acc[routing_num]",
  "bankAcc[routingNum]",
  "bankacc[routingnum]",
  "BANKACC[ROUTINGNUM]",
  "bank_acc[routing_num]",
  "Bank acc[routing num]",
  "Bank_acc[routing_number]",
  "bankAcc[routingNumber]",
  "bankacc[routingnumber]",
  "BANKACC[ROUTINGNUMBER]",
  "bank_acc[routing_number]",
  "Bank acc[routing number]",
  "Bank_acc_num",
  "bankAccNum",
  "bankaccnum",
  "BANKACCNUM",
  "bank_acc_num",
  "Bank acc num",
  "Bank_acc_number",
  "bankAccNumber",
  "bankaccnumber",
  "BANKACCNUMBER",
  "bank_acc_number",
  "Bank acc number",
  "Bank_account",
  "bankAccount",
  "bankaccount",
  "BANKACCOUNT",
  "bank_account",
  "Bank account",
  "Bank_account[routing_number]",
  "bankAccount[routingNumber]",
  "bankaccount[routingnumber]",
  "BANKACCOUNT[ROUTINGNUMBER]",
  "bank_account[routing_number]",
  "Bank account[routing number]",
  "Bank_account_num",
  "bankAccountNum",
  "bankaccountnum",
  "BANKACCOUNTNUM",
  "bank_account_num",
  "Bank account num",
  "Bank_account_number",
  "bankAccountNumber",
  "bankaccountnumber",
  "BANKACCOUNTNUMBER",
  "bank_account_number",
  "Bank account number",
  "Card[cvv]",
  "card[cvv]",
  "CARD[CVV]",
  "Card[num]",
  "card[num]",
  "CARD[NUM]",
  "Card[number]",
  "card[number]",
  "CARD[NUMBER]",
  "Card_cvv",
  "cardCvv",
  "cardcvv",
  "CARDCVV",
  "card_cvv",
  "Card cvv",
  "Card_num",
  "cardNum",
  "cardnum",
  "CARDNUM",
  "card_num",
  "Card num",
  "Card_number",
  "cardNumber",
  "cardnumber",
  "CARDNUMBER",
  "card_number",
  "Card number",
  "Cc_num",
  "ccNum",
  "ccnum",
  "CCNUM",
  "cc_num",
  "Cc num",
  "Cc_number",
  "ccNumber",
  "ccnumber",
  "CCNUMBER",
  "cc_number",
  "Cc number",
  "Confirm_passwd",
  "confirmPasswd",
  "confirmpasswd",
  "CONFIRMPASSWD",
  "confirm_passwd",
  "Confirm passwd",
  "Confirm_password",
  "confirmPassword",
  "confirmpassword",
  "CONFIRMPASSWORD",
  "confirm_password",
  "Confirm password",
  "Credentials",
  "credentials",
  "CREDENTIALS",
  "Credit_card",
  "creditCard",
  "creditcard",
  "CREDITCARD",
  "credit_card",
  "Credit card",
  "Credit_card_num",
  "creditCardNum",
  "creditcardnum",
  "CREDITCARDNUM",
  "credit_card_num",
  "Credit card num",
  "Credit_card_number",
  "creditCardNumber",
  "creditcardnumber",
  "CREDITCARDNUMBER",
  "credit_card_number",
  "Credit card number",
  "Creds",
  "creds",
  "CREDS",
  "Cvv",
  "cvv",
  "CVV",
  "Hash",
  "hash",
  "HASH",
  "Mysql_pwd",
  "mysqlPwd",
  "mysqlpwd",
  "MYSQLPWD",
  "mysql_pwd",
  "Mysql pwd",
  "New_password",
  "newPassword",
  "newpassword",
  "NEWPASSWORD",
  "new_password",
  "New password",
  "Old_password",
  "oldPassword",
  "oldpassword",
  "OLDPASSWORD",
  "old_password",
  "Old password",
  "Passwd",
  "passwd",
  "PASSWD",
  "Passwd_confirm",
  "passwdConfirm",
  "passwdconfirm",
  "PASSWDCONFIRM",
  "passwd_confirm",
  "Passwd confirm",
  "Password",
  "password",
  "PASSWORD",
  "Password1",
  "password1",
  "PASSWORD1",
  "Password2",
  "password2",
  "PASSWORD2",
  "Password_confirm",
  "passwordConfirm",
  "passwordconfirm",
  "PASSWORDCONFIRM",
  "password_confirm",
  "Password confirm",
  "Pwd",
  "pwd",
  "PWD",
  "Repeat_password",
  "repeatPassword",
  "repeatpassword",
  "REPEATPASSWORD",
  "repeat_password",
  "Repeat password",
  "Routing_acc",
  "routingAcc",
  "routingacc",
  "ROUTINGACC",
  "routing_acc",
  "Routing acc",
  "Routing_acc_num",
  "routingAccNum",
  "routingaccnum",
  "ROUTINGACCNUM",
  "routing_acc_num",
  "Routing acc num",
  "Routing_acc_number",
  "routingAccNumber",
  "routingaccnumber",
  "ROUTINGACCNUMBER",
  "routing_acc_number",
  "Routing acc number",
  "Routing_account_number",
  "routingAccountNumber",
  "routingaccountnumber",
  "ROUTINGACCOUNTNUMBER",
  "routing_account_number",
  "Routing account number",
  "Routing_number",
  "routingNumber",
  "routingnumber",
  "ROUTINGNUMBER",
  "routing_number",
  "Routing number",
  "Salt",
  "salt",
  "SALT",
  "Secret",
  "secret",
  "SECRET",
  "Social_security_num",
  "socialSecurityNum",
  "socialsecuritynum",
  "SOCIALSECURITYNUM",
  "social_security_num",
  "Social security num",
  "Social_security_number",
  "socialSecurityNumber",
  "socialsecuritynumber",
  "SOCIALSECURITYNUMBER",
  "social_security_number",
  "Social security number",
  "Ssn",
  "ssn",
  "SSN",
  "Stripe_token",
  "stripeToken",
  "stripetoken",
  "STRIPETOKEN",
  "stripe_token",
  "Stripe token",
  "Token",
  "token",
  "TOKEN",
  "Field__csrf",
  "fieldCsrf",
  "fieldcsrf",
  "FIELDCSRF",
  "field__csrf",
  "Field  csrf",
  "_csrf_field",
  "CsrfField",
  "csrffield",
  "CSRFFIELD",
  "Csrf field",
  "Input__csrf",
  "inputCsrf",
  "inputcsrf",
  "INPUTCSRF",
  "input__csrf",
  "Input  csrf",
  "_csrf_input",
  "CsrfInput",
  "csrfinput",
  "CSRFINPUT",
  "Csrf input",
  "Field_acc_number",
  "fieldAccNumber",
  "fieldaccnumber",
  "FIELDACCNUMBER",
  "field_acc_number",
  "Field acc number",
  "Acc_number_field",
  "accNumberField",
  "accnumberfield",
  "ACCNUMBERFIELD",
  "acc_number_field",
  "Acc number field",
  "Input_acc_number",
  "inputAccNumber",
  "inputaccnumber",
  "INPUTACCNUMBER",
  "input_acc_number",
  "Input acc number",
  "Acc_number_input",
  "accNumberInput",
  "accnumberinput",
  "ACCNUMBERINPUT",
  "acc_number_input",
  "Acc number input",
  "Field_access_token",
  "fieldAccessToken",
  "fieldaccesstoken",
  "FIELDACCESSTOKEN",
  "field_access_token",
  "Field access token",
  "Access_token_field",
  "accessTokenField",
  "accesstokenfield",
  "ACCESSTOKENFIELD",
  "access_token_field",
  "Access token field",
  "Input_access_token",
  "inputAccessToken",
  "inputaccesstoken",
  "INPUTACCESSTOKEN",
  "input_access_token",
  "Input access token",
  "Access_token_input",
  "accessTokenInput",
  "accesstokeninput",
  "ACCESSTOKENINPUT",
  "access_token_input",
  "Access token input",
  "Field_account_bank_number",
  "fieldAccountBankNumber",
  "fieldaccountbanknumber",
  "FIELDACCOUNTBANKNUMBER",
  "field_account_bank_number",
  "Field account bank number",
  "Account_bank_number_field",
  "accountBankNumberField",
  "accountbanknumberfield",
  "ACCOUNTBANKNUMBERFIELD",
  "account_bank_number_field",
  "Account bank number field",
  "Input_account_bank_number",
  "inputAccountBankNumber",
  "inputaccountbanknumber",
  "INPUTACCOUNTBANKNUMBER",
  "input_account_bank_number",
  "Input account bank number",
  "Account_bank_number_input",
  "accountBankNumberInput",
  "accountbanknumberinput",
  "ACCOUNTBANKNUMBERINPUT",
  "account_bank_number_input",
  "Account bank number input",
  "Field_account_number",
  "fieldAccountNumber",
  "fieldaccountnumber",
  "FIELDACCOUNTNUMBER",
  "field_account_number",
  "Field account number",
  "Account_number_field",
  "accountNumberField",
  "accountnumberfield",
  "ACCOUNTNUMBERFIELD",
  "account_number_field",
  "Account number field",
  "Input_account_number",
  "inputAccountNumber",
  "inputaccountnumber",
  "INPUTACCOUNTNUMBER",
  "input_account_number",
  "Input account number",
  "Account_number_input",
  "accountNumberInput",
  "accountnumberinput",
  "ACCOUNTNUMBERINPUT",
  "account_number_input",
  "Account number input",
  "Field_account_routing_number",
  "fieldAccountRoutingNumber",
  "fieldaccountroutingnumber",
  "FIELDACCOUNTROUTINGNUMBER",
  "field_account_routing_number",
  "Field account routing number",
  "Account_routing_number_field",
  "accountRoutingNumberField",
  "accountroutingnumberfield",
  "ACCOUNTROUTINGNUMBERFIELD",
  "account_routing_number_field",
  "Account routing number field",
  "Input_account_routing_number",
  "inputAccountRoutingNumber",
  "inputaccountroutingnumber",
  "INPUTACCOUNTROUTINGNUMBER",
  "input_account_routing_number",
  "Input account routing number",
  "Account_routing_number_input",
  "accountRoutingNumberInput",
  "accountroutingnumberinput",
  "ACCOUNTROUTINGNUMBERINPUT",
  "account_routing_number_input",
  "Account routing number input",
  "Field_api_key",
  "fieldApiKey",
  "fieldapikey",
  "FIELDAPIKEY",
  "field_api_key",
  "Field api key",
  "Api_key_field",
  "apiKeyField",
  "apikeyfield",
  "APIKEYFIELD",
  "api_key_field",
  "Api key field",
  "Input_api_key",
  "inputApiKey",
  "inputapikey",
  "INPUTAPIKEY",
  "input_api_key",
  "Input api key",
  "Api_key_input",
  "apiKeyInput",
  "apikeyinput",
  "APIKEYINPUT",
  "api_key_input",
  "Api key input",
  "Field_api_token",
  "fieldApiToken",
  "fieldapitoken",
  "FIELDAPITOKEN",
  "field_api_token",
  "Field api token",
  "Api_token_field",
  "apiTokenField",
  "apitokenfield",
  "APITOKENFIELD",
  "api_token_field",
  "Api token field",
  "Input_api_token",
  "inputApiToken",
  "inputapitoken",
  "INPUTAPITOKEN",
  "input_api_token",
  "Input api token",
  "Api_token_input",
  "apiTokenInput",
  "apitokeninput",
  "APITOKENINPUT",
  "api_token_input",
  "Api token input",
  "Field_auth_token",
  "fieldAuthToken",
  "fieldauthtoken",
  "FIELDAUTHTOKEN",
  "field_auth_token",
  "Field auth token",
  "Auth_token_field",
  "authTokenField",
  "authtokenfield",
  "AUTHTOKENFIELD",
  "auth_token_field",
  "Auth token field",
  "Input_auth_token",
  "inputAuthToken",
  "inputauthtoken",
  "INPUTAUTHTOKEN",
  "input_auth_token",
  "Input auth token",
  "Auth_token_input",
  "authTokenInput",
  "authtokeninput",
  "AUTHTOKENINPUT",
  "auth_token_input",
  "Auth token input",
  "Field_bank_acc",
  "fieldBankAcc",
  "fieldbankacc",
  "FIELDBANKACC",
  "field_bank_acc",
  "Field bank acc",
  "Bank_acc_field",
  "bankAccField",
  "bankaccfield",
  "BANKACCFIELD",
  "bank_acc_field",
  "Bank acc field",
  "Input_bank_acc",
  "inputBankAcc",
  "inputbankacc",
  "INPUTBANKACC",
  "input_bank_acc",
  "Input bank acc",
  "Bank_acc_input",
  "bankAccInput",
  "bankaccinput",
  "BANKACCINPUT",
  "bank_acc_input",
  "Bank acc input",
  "Field_bank_acc[routing_num]",
  "fieldBankAcc[routingNum]",
  "fieldbankacc[routingnum]",
  "FIELDBANKACC[ROUTINGNUM]",
  "field_bank_acc[routing_num]",
  "Field bank acc[routing num]",
  "Bank_acc[routing_num]_field",
  "bankAcc[routingNum]Field",
  "bankacc[routingnum]field",
  "BANKACC[ROUTINGNUM]FIELD",
  "bank_acc[routing_num]_field",
  "Bank acc[routing num] field",
  "Input_bank_acc[routing_num]",
  "inputBankAcc[routingNum]",
  "inputbankacc[routingnum]",
  "INPUTBANKACC[ROUTINGNUM]",
  "input_bank_acc[routing_num]",
  "Input bank acc[routing num]",
  "Bank_acc[routing_num]_input",
  "bankAcc[routingNum]Input",
  "bankacc[routingnum]input",
  "BANKACC[ROUTINGNUM]INPUT",
  "bank_acc[routing_num]_input",
  "Bank acc[routing num] input",
  "Field_bank_acc[routing_number]",
  "fieldBankAcc[routingNumber]",
  "fieldbankacc[routingnumber]",
  "FIELDBANKACC[ROUTINGNUMBER]",
  "field_bank_acc[routing_number]",
  "Field bank acc[routing number]",
  "Bank_acc[routing_number]_field",
  "bankAcc[routingNumber]Field",
  "bankacc[routingnumber]field",
  "BANKACC[ROUTINGNUMBER]FIELD",
  "bank_acc[routing_number]_field",
  "Bank acc[routing number] field",
  "Input_bank_acc[routing_number]",
  "inputBankAcc[routingNumber]",
  "inputbankacc[routingnumber]",
  "INPUTBANKACC[ROUTINGNUMBER]",
  "input_bank_acc[routing_number]",
  "Input bank acc[routing number]",
  "Bank_acc[routing_number]_input",
  "bankAcc[routingNumber]Input",
  "bankacc[routingnumber]input",
  "BANKACC[ROUTINGNUMBER]INPUT",
  "bank_acc[routing_number]_input",
  "Bank acc[routing number] input",
  "Field_bank_acc_num",
  "fieldBankAccNum",
  "fieldbankaccnum",
  "FIELDBANKACCNUM",
  "field_bank_acc_num",
  "Field bank acc num",
  "Bank_acc_num_field",
  "bankAccNumField",
  "bankaccnumfield",
  "BANKACCNUMFIELD",
  "bank_acc_num_field",
  "Bank acc num field",
  "Input_bank_acc_num",
  "inputBankAccNum",
  "inputbankaccnum",
  "INPUTBANKACCNUM",
  "input_bank_acc_num",
  "Input bank acc num",
  "Bank_acc_num_input",
  "bankAccNumInput",
  "bankaccnuminput",
  "BANKACCNUMINPUT",
  "bank_acc_num_input",
  "Bank acc num input",
  "Field_bank_acc_number",
  "fieldBankAccNumber",
  "fieldbankaccnumber",
  "FIELDBANKACCNUMBER",
  "field_bank_acc_number",
  "Field bank acc number",
  "Bank_acc_number_field",
  "bankAccNumberField",
  "bankaccnumberfield",
  "BANKACCNUMBERFIELD",
  "bank_acc_number_field",
  "Bank acc number field",
  "Input_bank_acc_number",
  "inputBankAccNumber",
  "inputbankaccnumber",
  "INPUTBANKACCNUMBER",
  "input_bank_acc_number",
  "Input bank acc number",
  "Bank_acc_number_input",
  "bankAccNumberInput",
  "bankaccnumberinput",
  "BANKACCNUMBERINPUT",
  "bank_acc_number_input",
  "Bank acc number input",
  "Field_bank_account",
  "fieldBankAccount",
  "fieldbankaccount",
  "FIELDBANKACCOUNT",
  "field_bank_account",
  "Field bank account",
  "Bank_account_field",
  "bankAccountField",
  "bankaccountfield",
  "BANKACCOUNTFIELD",
  "bank_account_field",
  "Bank account field",
  "Input_bank_account",
  "inputBankAccount",
  "inputbankaccount",
  "INPUTBANKACCOUNT",
  "input_bank_account",
  "Input bank account",
  "Bank_account_input",
  "bankAccountInput",
  "bankaccountinput",
  "BANKACCOUNTINPUT",
  "bank_account_input",
  "Bank account input",
  "Field_bank_account[routing_number]",
  "fieldBankAccount[routingNumber]",
  "fieldbankaccount[routingnumber]",
  "FIELDBANKACCOUNT[ROUTINGNUMBER]",
  "field_bank_account[routing_number]",
  "Field bank account[routing number]",
  "Bank_account[routing_number]_field",
  "bankAccount[routingNumber]Field",
  "bankaccount[routingnumber]field",
  "BANKACCOUNT[ROUTINGNUMBER]FIELD",
  "bank_account[routing_number]_field",
  "Bank account[routing number] field",
  "Input_bank_account[routing_number]",
  "inputBankAccount[routingNumber]",
  "inputbankaccount[routingnumber]",
  "INPUTBANKACCOUNT[ROUTINGNUMBER]",
  "input_bank_account[routing_number]",
  "Input bank account[routing number]",
  "Bank_account[routing_number]_input",
  "bankAccount[routingNumber]Input",
  "bankaccount[routingnumber]input",
  "BANKACCOUNT[ROUTINGNUMBER]INPUT",
  "bank_account[routing_number]_input",
  "Bank account[routing number] input",
  "Field_bank_account_num",
  "fieldBankAccountNum",
  "fieldbankaccountnum",
  "FIELDBANKACCOUNTNUM",
  "field_bank_account_num",
  "Field bank account num",
  "Bank_account_num_field",
  "bankAccountNumField",
  "bankaccountnumfield",
  "BANKACCOUNTNUMFIELD",
  "bank_account_num_field",
  "Bank account num field",
  "Input_bank_account_num",
  "inputBankAccountNum",
  "inputbankaccountnum",
  "INPUTBANKACCOUNTNUM",
  "input_bank_account_num",
  "Input bank account num",
  "Bank_account_num_input",
  "bankAccountNumInput",
  "bankaccountnuminput",
  "BANKACCOUNTNUMINPUT",
  "bank_account_num_input",
  "Bank account num input",
  "Field_bank_account_number",
  "fieldBankAccountNumber",
  "fieldbankaccountnumber",
  "FIELDBANKACCOUNTNUMBER",
  "field_bank_account_number",
  "Field bank account number",
  "Bank_account_number_field",
  "bankAccountNumberField",
  "bankaccountnumberfield",
  "BANKACCOUNTNUMBERFIELD",
  "bank_account_number_field",
  "Bank account number field",
  "Input_bank_account_number",
  "inputBankAccountNumber",
  "inputbankaccountnumber",
  "INPUTBANKACCOUNTNUMBER",
  "input_bank_account_number",
  "Input bank account number",
  "Bank_account_number_input",
  "bankAccountNumberInput",
  "bankaccountnumberinput",
  "BANKACCOUNTNUMBERINPUT",
  "bank_account_number_input",
  "Bank account number input",
  "Field_card[cvv]",
  "fieldCard[cvv]",
  "fieldcard[cvv]",
  "FIELDCARD[CVV]",
  "field_card[cvv]",
  "Field card[cvv]",
  "Card[cvv]_field",
  "card[cvv]Field",
  "card[cvv]field",
  "CARD[CVV]FIELD",
  "card[cvv]_field",
  "Card[cvv] field",
  "Input_card[cvv]",
  "inputCard[cvv]",
  "inputcard[cvv]",
  "INPUTCARD[CVV]",
  "input_card[cvv]",
  "Input card[cvv]",
  "Card[cvv]_input",
  "card[cvv]Input",
  "card[cvv]input",
  "CARD[CVV]INPUT",
  "card[cvv]_input",
  "Card[cvv] input",
  "Field_card[num]",
  "fieldCard[num]",
  "fieldcard[num]",
  "FIELDCARD[NUM]",
  "field_card[num]",
  "Field card[num]",
  "Card[num]_field",
  "card[num]Field",
  "card[num]field",
  "CARD[NUM]FIELD",
  "card[num]_field",
  "Card[num] field",
  "Input_card[num]",
  "inputCard[num]",
  "inputcard[num]",
  "INPUTCARD[NUM]",
  "input_card[num]",
  "Input card[num]",
  "Card[num]_input",
  "card[num]Input",
  "card[num]input",
  "CARD[NUM]INPUT",
  "card[num]_input",
  "Card[num] input",
  "Field_card[number]",
  "fieldCard[number]",
  "fieldcard[number]",
  "FIELDCARD[NUMBER]",
  "field_card[number]",
  "Field card[number]",
  "Card[number]_field",
  "card[number]Field",
  "card[number]field",
  "CARD[NUMBER]FIELD",
  "card[number]_field",
  "Card[number] field",
  "Input_card[number]",
  "inputCard[number]",
  "inputcard[number]",
  "INPUTCARD[NUMBER]",
  "input_card[number]",
  "Input card[number]",
  "Card[number]_input",
  "card[number]Input",
  "card[number]input",
  "CARD[NUMBER]INPUT",
  "card[number]_input",
  "Card[number] input",
  "Field_card_cvv",
  "fieldCardCvv",
  "fieldcardcvv",
  "FIELDCARDCVV",
  "field_card_cvv",
  "Field card cvv",
  "Card_cvv_field",
  "cardCvvField",
  "cardcvvfield",
  "CARDCVVFIELD",
  "card_cvv_field",
  "Card cvv field",
  "Input_card_cvv",
  "inputCardCvv",
  "inputcardcvv",
  "INPUTCARDCVV",
  "input_card_cvv",
  "Input card cvv",
  "Card_cvv_input",
  "cardCvvInput",
  "cardcvvinput",
  "CARDCVVINPUT",
  "card_cvv_input",
  "Card cvv input",
  "Field_card_num",
  "fieldCardNum",
  "fieldcardnum",
  "FIELDCARDNUM",
  "field_card_num",
  "Field card num",
  "Card_num_field",
  "cardNumField",
  "cardnumfield",
  "CARDNUMFIELD",
  "card_num_field",
  "Card num field",
  "Input_card_num",
  "inputCardNum",
  "inputcardnum",
  "INPUTCARDNUM",
  "input_card_num",
  "Input card num",
  "Card_num_input",
  "cardNumInput",
  "cardnuminput",
  "CARDNUMINPUT",
  "card_num_input",
  "Card num input",
  "Field_card_number",
  "fieldCardNumber",
  "fieldcardnumber",
  "FIELDCARDNUMBER",
  "field_card_number",
  "Field card number",
  "Card_number_field",
  "cardNumberField",
  "cardnumberfield",
  "CARDNUMBERFIELD",
  "card_number_field",
  "Card number field",
  "Input_card_number",
  "inputCardNumber",
  "inputcardnumber",
  "INPUTCARDNUMBER",
  "input_card_number",
  "Input card number",
  "Card_number_input",
  "cardNumberInput",
  "cardnumberinput",
  "CARDNUMBERINPUT",
  "card_number_input",
  "Card number input",
  "Field_cc_num",
  "fieldCcNum",
  "fieldccnum",
  "FIELDCCNUM",
  "field_cc_num",
  "Field cc num",
  "Cc_num_field",
  "ccNumField",
  "ccnumfield",
  "CCNUMFIELD",
  "cc_num_field",
  "Cc num field",
  "Input_cc_num",
  "inputCcNum",
  "inputccnum",
  "INPUTCCNUM",
  "input_cc_num",
  "Input cc num",
  "Cc_num_input",
  "ccNumInput",
  "ccnuminput",
  "CCNUMINPUT",
  "cc_num_input",
  "Cc num input",
  "Field_cc_number",
  "fieldCcNumber",
  "fieldccnumber",
  "FIELDCCNUMBER",
  "field_cc_number",
  "Field cc number",
  "Cc_number_field",
  "ccNumberField",
  "ccnumberfield",
  "CCNUMBERFIELD",
  "cc_number_field",
  "Cc number field",
  "Input_cc_number",
  "inputCcNumber",
  "inputccnumber",
  "INPUTCCNUMBER",
  "input_cc_number",
  "Input cc number",
  "Cc_number_input",
  "ccNumberInput",
  "ccnumberinput",
  "CCNUMBERINPUT",
  "cc_number_input",
  "Cc number input",
  "Field_confirm_passwd",
  "fieldConfirmPasswd",
  "fieldconfirmpasswd",
  "FIELDCONFIRMPASSWD",
  "field_confirm_passwd",
  "Field confirm passwd",
  "Confirm_passwd_field",
  "confirmPasswdField",
  "confirmpasswdfield",
  "CONFIRMPASSWDFIELD",
  "confirm_passwd_field",
  "Confirm passwd field",
  "Input_confirm_passwd",
  "inputConfirmPasswd",
  "inputconfirmpasswd",
  "INPUTCONFIRMPASSWD",
  "input_confirm_passwd",
  "Input confirm passwd",
  "Confirm_passwd_input",
  "confirmPasswdInput",
  "confirmpasswdinput",
  "CONFIRMPASSWDINPUT",
  "confirm_passwd_input",
  "Confirm passwd input",
  "Field_confirm_password",
  "fieldConfirmPassword",
  "fieldconfirmpassword",
  "FIELDCONFIRMPASSWORD",
  "field_confirm_password",
  "Field confirm password",
  "Confirm_password_field",
  "confirmPasswordField",
  "confirmpasswordfield",
  "CONFIRMPASSWORDFIELD",
  "confirm_password_field",
  "Confirm password field",
  "Input_confirm_password",
  "inputConfirmPassword",
  "inputconfirmpassword",
  "INPUTCONFIRMPASSWORD",
  "input_confirm_password",
  "Input confirm password",
  "Confirm_password_input",
  "confirmPasswordInput",
  "confirmpasswordinput",
  "CONFIRMPASSWORDINPUT",
  "confirm_password_input",
  "Confirm password input",
  "Field_credentials",
  "fieldCredentials",
  "fieldcredentials",
  "FIELDCREDENTIALS",
  "field_credentials",
  "Field credentials",
  "Credentials_field",
  "credentialsField",
  "credentialsfield",
  "CREDENTIALSFIELD",
  "credentials_field",
  "Credentials field",
  "Input_credentials",
  "inputCredentials",
  "inputcredentials",
  "INPUTCREDENTIALS",
  "input_credentials",
  "Input credentials",
  "Credentials_input",
  "credentialsInput",
  "credentialsinput",
  "CREDENTIALSINPUT",
  "credentials_input",
  "Credentials input",
  "Field_credit_card",
  "fieldCreditCard",
  "fieldcreditcard",
  "FIELDCREDITCARD",
  "field_credit_card",
  "Field credit card",
  "Credit_card_field",
  "creditCardField",
  "creditcardfield",
  "CREDITCARDFIELD",
  "credit_card_field",
  "Credit card field",
  "Input_credit_card",
  "inputCreditCard",
  "inputcreditcard",
  "INPUTCREDITCARD",
  "input_credit_card",
  "Input credit card",
  "Credit_card_input",
  "creditCardInput",
  "creditcardinput",
  "CREDITCARDINPUT",
  "credit_card_input",
  "Credit card input",
  "Field_credit_card_num",
  "fieldCreditCardNum",
  "fieldcreditcardnum",
  "FIELDCREDITCARDNUM",
  "field_credit_card_num",
  "Field credit card num",
  "Credit_card_num_field",
  "creditCardNumField",
  "creditcardnumfield",
  "CREDITCARDNUMFIELD",
  "credit_card_num_field",
  "Credit card num field",
  "Input_credit_card_num",
  "inputCreditCardNum",
  "inputcreditcardnum",
  "INPUTCREDITCARDNUM",
  "input_credit_card_num",
  "Input credit card num",
  "Credit_card_num_input",
  "creditCardNumInput",
  "creditcardnuminput",
  "CREDITCARDNUMINPUT",
  "credit_card_num_input",
  "Credit card num input",
  "Field_credit_card_number",
  "fieldCreditCardNumber",
  "fieldcreditcardnumber",
  "FIELDCREDITCARDNUMBER",
  "field_credit_card_number",
  "Field credit card number",
  "Credit_card_number_field",
  "creditCardNumberField",
  "creditcardnumberfield",
  "CREDITCARDNUMBERFIELD",
  "credit_card_number_field",
  "Credit card number field",
  "Input_credit_card_number",
  "inputCreditCardNumber",
  "inputcreditcardnumber",
  "INPUTCREDITCARDNUMBER",
  "input_credit_card_number",
  "Input credit card number",
  "Credit_card_number_input",
  "creditCardNumberInput",
  "creditcardnumberinput",
  "CREDITCARDNUMBERINPUT",
  "credit_card_number_input",
  "Credit card number input",
  "Field_creds",
  "fieldCreds",
  "fieldcreds",
  "FIELDCREDS",
  "field_creds",
  "Field creds",
  "Creds_field",
  "credsField",
  "credsfield",
  "CREDSFIELD",
  "creds_field",
  "Creds field",
  "Input_creds",
  "inputCreds",
  "inputcreds",
  "INPUTCREDS",
  "input_creds",
  "Input creds",
  "Creds_input",
  "credsInput",
  "credsinput",
  "CREDSINPUT",
  "creds_input",
  "Creds input",
  "Field_csrf",
  "field_csrf",
  "Field csrf",
  "Csrf_field",
  "csrfField",
  "csrf_field",
  "Input_csrf",
  "input_csrf",
  "Input csrf",
  "Csrf_input",
  "csrfInput",
  "csrf_input",
  "Field_cvv",
  "fieldCvv",
  "fieldcvv",
  "FIELDCVV",
  "field_cvv",
  "Field cvv",
  "Cvv_field",
  "cvvField",
  "cvvfield",
  "CVVFIELD",
  "cvv_field",
  "Cvv field",
  "Input_cvv",
  "inputCvv",
  "inputcvv",
  "INPUTCVV",
  "input_cvv",
  "Input cvv",
  "Cvv_input",
  "cvvInput",
  "cvvinput",
  "CVVINPUT",
  "cvv_input",
  "Cvv input",
  "Field_hash",
  "fieldHash",
  "fieldhash",
  "FIELDHASH",
  "field_hash",
  "Field hash",
  "Hash_field",
  "hashField",
  "hashfield",
  "HASHFIELD",
  "hash_field",
  "Hash field",
  "Input_hash",
  "inputHash",
  "inputhash",
  "INPUTHASH",
  "input_hash",
  "Input hash",
  "Hash_input",
  "hashInput",
  "hashinput",
  "HASHINPUT",
  "hash_input",
  "Hash input",
  "Field_mysql_pwd",
  "fieldMysqlPwd",
  "fieldmysqlpwd",
  "FIELDMYSQLPWD",
  "field_mysql_pwd",
  "Field mysql pwd",
  "Mysql_pwd_field",
  "mysqlPwdField",
  "mysqlpwdfield",
  "MYSQLPWDFIELD",
  "mysql_pwd_field",
  "Mysql pwd field",
  "Input_mysql_pwd",
  "inputMysqlPwd",
  "inputmysqlpwd",
  "INPUTMYSQLPWD",
  "input_mysql_pwd",
  "Input mysql pwd",
  "Mysql_pwd_input",
  "mysqlPwdInput",
  "mysqlpwdinput",
  "MYSQLPWDINPUT",
  "mysql_pwd_input",
  "Mysql pwd input",
  "Field_new_password",
  "fieldNewPassword",
  "fieldnewpassword",
  "FIELDNEWPASSWORD",
  "field_new_password",
  "Field new password",
  "New_password_field",
  "newPasswordField",
  "newpasswordfield",
  "NEWPASSWORDFIELD",
  "new_password_field",
  "New password field",
  "Input_new_password",
  "inputNewPassword",
  "inputnewpassword",
  "INPUTNEWPASSWORD",
  "input_new_password",
  "Input new password",
  "New_password_input",
  "newPasswordInput",
  "newpasswordinput",
  "NEWPASSWORDINPUT",
  "new_password_input",
  "New password input",
  "Field_old_password",
  "fieldOldPassword",
  "fieldoldpassword",
  "FIELDOLDPASSWORD",
  "field_old_password",
  "Field old password",
  "Old_password_field",
  "oldPasswordField",
  "oldpasswordfield",
  "OLDPASSWORDFIELD",
  "old_password_field",
  "Old password field",
  "Input_old_password",
  "inputOldPassword",
  "inputoldpassword",
  "INPUTOLDPASSWORD",
  "input_old_password",
  "Input old password",
  "Old_password_input",
  "oldPasswordInput",
  "oldpasswordinput",
  "OLDPASSWORDINPUT",
  "old_password_input",
  "Old password input",
  "Field_passwd",
  "fieldPasswd",
  "fieldpasswd",
  "FIELDPASSWD",
  "field_passwd",
  "Field passwd",
  "Passwd_field",
  "passwdField",
  "passwdfield",
  "PASSWDFIELD",
  "passwd_field",
  "Passwd field",
  "Input_passwd",
  "inputPasswd",
  "inputpasswd",
  "INPUTPASSWD",
  "input_passwd",
  "Input passwd",
  "Passwd_input",
  "passwdInput",
  "passwdinput",
  "PASSWDINPUT",
  "passwd_input",
  "Passwd input",
  "Field_passwd_confirm",
  "fieldPasswdConfirm",
  "fieldpasswdconfirm",
  "FIELDPASSWDCONFIRM",
  "field_passwd_confirm",
  "Field passwd confirm",
  "Passwd_confirm_field",
  "passwdConfirmField",
  "passwdconfirmfield",
  "PASSWDCONFIRMFIELD",
  "passwd_confirm_field",
  "Passwd confirm field",
  "Input_passwd_confirm",
  "inputPasswdConfirm",
  "inputpasswdconfirm",
  "INPUTPASSWDCONFIRM",
  "input_passwd_confirm",
  "Input passwd confirm",
  "Passwd_confirm_input",
  "passwdConfirmInput",
  "passwdconfirminput",
  "PASSWDCONFIRMINPUT",
  "passwd_confirm_input",
  "Passwd confirm input",
  "Field_password",
  "fieldPassword",
  "fieldpassword",
  "FIELDPASSWORD",
  "field_password",
  "Field password",
  "Password_field",
  "passwordField",
  "passwordfield",
  "PASSWORDFIELD",
  "password_field",
  "Password field",
  "Input_password",
  "inputPassword",
  "inputpassword",
  "INPUTPASSWORD",
  "input_password",
  "Input password",
  "Password_input",
  "passwordInput",
  "passwordinput",
  "PASSWORDINPUT",
  "password_input",
  "Password input",
  "Field_password1",
  "fieldPassword1",
  "fieldpassword1",
  "FIELDPASSWORD1",
  "field_password1",
  "Field password1",
  "Password1_field",
  "password1Field",
  "password1field",
  "PASSWORD1FIELD",
  "password1_field",
  "Password1 field",
  "Input_password1",
  "inputPassword1",
  "inputpassword1",
  "INPUTPASSWORD1",
  "input_password1",
  "Input password1",
  "Password1_input",
  "password1Input",
  "password1input",
  "PASSWORD1INPUT",
  "password1_input",
  "Password1 input",
  "Field_password2",
  "fieldPassword2",
  "fieldpassword2",
  "FIELDPASSWORD2",
  "field_password2",
  "Field password2",
  "Password2_field",
  "password2Field",
  "password2field",
  "PASSWORD2FIELD",
  "password2_field",
  "Password2 field",
  "Input_password2",
  "inputPassword2",
  "inputpassword2",
  "INPUTPASSWORD2",
  "input_password2",
  "Input password2",
  "Password2_input",
  "password2Input",
  "password2input",
  "PASSWORD2INPUT",
  "password2_input",
  "Password2 input",
  "Field_password_confirm",
  "fieldPasswordConfirm",
  "fieldpasswordconfirm",
  "FIELDPASSWORDCONFIRM",
  "field_password_confirm",
  "Field password confirm",
  "Password_confirm_field",
  "passwordConfirmField",
  "passwordconfirmfield",
  "PASSWORDCONFIRMFIELD",
  "password_confirm_field",
  "Password confirm field",
  "Input_password_confirm",
  "inputPasswordConfirm",
  "inputpasswordconfirm",
  "INPUTPASSWORDCONFIRM",
  "input_password_confirm",
  "Input password confirm",
  "Password_confirm_input",
  "passwordConfirmInput",
  "passwordconfirminput",
  "PASSWORDCONFIRMINPUT",
  "password_confirm_input",
  "Password confirm input",
  "Field_pwd",
  "fieldPwd",
  "fieldpwd",
  "FIELDPWD",
  "field_pwd",
  "Field pwd",
  "Pwd_field",
  "pwdField",
  "pwdfield",
  "PWDFIELD",
  "pwd_field",
  "Pwd field",
  "Input_pwd",
  "inputPwd",
  "inputpwd",
  "INPUTPWD",
  "input_pwd",
  "Input pwd",
  "Pwd_input",
  "pwdInput",
  "pwdinput",
  "PWDINPUT",
  "pwd_input",
  "Pwd input",
  "Field_repeat_password",
  "fieldRepeatPassword",
  "fieldrepeatpassword",
  "FIELDREPEATPASSWORD",
  "field_repeat_password",
  "Field repeat password",
  "Repeat_password_field",
  "repeatPasswordField",
  "repeatpasswordfield",
  "REPEATPASSWORDFIELD",
  "repeat_password_field",
  "Repeat password field",
  "Input_repeat_password",
  "inputRepeatPassword",
  "inputrepeatpassword",
  "INPUTREPEATPASSWORD",
  "input_repeat_password",
  "Input repeat password",
  "Repeat_password_input",
  "repeatPasswordInput",
  "repeatpasswordinput",
  "REPEATPASSWORDINPUT",
  "repeat_password_input",
  "Repeat password input",
  "Field_routing_acc",
  "fieldRoutingAcc",
  "fieldroutingacc",
  "FIELDROUTINGACC",
  "field_routing_acc",
  "Field routing acc",
  "Routing_acc_field",
  "routingAccField",
  "routingaccfield",
  "ROUTINGACCFIELD",
  "routing_acc_field",
  "Routing acc field",
  "Input_routing_acc",
  "inputRoutingAcc",
  "inputroutingacc",
  "INPUTROUTINGACC",
  "input_routing_acc",
  "Input routing acc",
  "Routing_acc_input",
  "routingAccInput",
  "routingaccinput",
  "ROUTINGACCINPUT",
  "routing_acc_input",
  "Routing acc input",
  "Field_routing_acc_num",
  "fieldRoutingAccNum",
  "fieldroutingaccnum",
  "FIELDROUTINGACCNUM",
  "field_routing_acc_num",
  "Field routing acc num",
  "Routing_acc_num_field",
  "routingAccNumField",
  "routingaccnumfield",
  "ROUTINGACCNUMFIELD",
  "routing_acc_num_field",
  "Routing acc num field",
  "Input_routing_acc_num",
  "inputRoutingAccNum",
  "inputroutingaccnum",
  "INPUTROUTINGACCNUM",
  "input_routing_acc_num",
  "Input routing acc num",
  "Routing_acc_num_input",
  "routingAccNumInput",
  "routingaccnuminput",
  "ROUTINGACCNUMINPUT",
  "routing_acc_num_input",
  "Routing acc num input",
  "Field_routing_acc_number",
  "fieldRoutingAccNumber",
  "fieldroutingaccnumber",
  "FIELDROUTINGACCNUMBER",
  "field_routing_acc_number",
  "Field routing acc number",
  "Routing_acc_number_field",
  "routingAccNumberField",
  "routingaccnumberfield",
  "ROUTINGACCNUMBERFIELD",
  "routing_acc_number_field",
  "Routing acc number field",
  "Input_routing_acc_number",
  "inputRoutingAccNumber",
  "inputroutingaccnumber",
  "INPUTROUTINGACCNUMBER",
  "input_routing_acc_number",
  "Input routing acc number",
  "Routing_acc_number_input",
  "routingAccNumberInput",
  "routingaccnumberinput",
  "ROUTINGACCNUMBERINPUT",
  "routing_acc_number_input",
  "Routing acc number input",
  "Field_routing_account_number",
  "fieldRoutingAccountNumber",
  "fieldroutingaccountnumber",
  "FIELDROUTINGACCOUNTNUMBER",
  "field_routing_account_number",
  "Field routing account number",
  "Routing_account_number_field",
  "routingAccountNumberField",
  "routingaccountnumberfield",
  "ROUTINGACCOUNTNUMBERFIELD",
  "routing_account_number_field",
  "Routing account number field",
  "Input_routing_account_number",
  "inputRoutingAccountNumber",
  "inputroutingaccountnumber",
  "INPUTROUTINGACCOUNTNUMBER",
  "input_routing_account_number",
  "Input routing account number",
  "Routing_account_number_input",
  "routingAccountNumberInput",
  "routingaccountnumberinput",
  "ROUTINGACCOUNTNUMBERINPUT",
  "routing_account_number_input",
  "Routing account number input",
  "Field_routing_number",
  "fieldRoutingNumber",
  "fieldroutingnumber",
  "FIELDROUTINGNUMBER",
  "field_routing_number",
  "Field routing number",
  "Routing_number_field",
  "routingNumberField",
  "routingnumberfield",
  "ROUTINGNUMBERFIELD",
  "routing_number_field",
  "Routing number field",
  "Input_routing_number",
  "inputRoutingNumber",
  "inputroutingnumber",
  "INPUTROUTINGNUMBER",
  "input_routing_number",
  "Input routing number",
  "Routing_number_input",
  "routingNumberInput",
  "routingnumberinput",
  "ROUTINGNUMBERINPUT",
  "routing_number_input",
  "Routing number input",
  "Field_salt",
  "fieldSalt",
  "fieldsalt",
  "FIELDSALT",
  "field_salt",
  "Field salt",
  "Salt_field",
  "saltField",
  "saltfield",
  "SALTFIELD",
  "salt_field",
  "Salt field",
  "Input_salt",
  "inputSalt",
  "inputsalt",
  "INPUTSALT",
  "input_salt",
  "Input salt",
  "Salt_input",
  "saltInput",
  "saltinput",
  "SALTINPUT",
  "salt_input",
  "Salt input",
  "Field_secret",
  "fieldSecret",
  "fieldsecret",
  "FIELDSECRET",
  "field_secret",
  "Field secret",
  "Secret_field",
  "secretField",
  "secretfield",
  "SECRETFIELD",
  "secret_field",
  "Secret field",
  "Input_secret",
  "inputSecret",
  "inputsecret",
  "INPUTSECRET",
  "input_secret",
  "Input secret",
  "Secret_input",
  "secretInput",
  "secretinput",
  "SECRETINPUT",
  "secret_input",
  "Secret input",
  "Field_social_security_num",
  "fieldSocialSecurityNum",
  "fieldsocialsecuritynum",
  "FIELDSOCIALSECURITYNUM",
  "field_social_security_num",
  "Field social security num",
  "Social_security_num_field",
  "socialSecurityNumField",
  "socialsecuritynumfield",
  "SOCIALSECURITYNUMFIELD",
  "social_security_num_field",
  "Social security num field",
  "Input_social_security_num",
  "inputSocialSecurityNum",
  "inputsocialsecuritynum",
  "INPUTSOCIALSECURITYNUM",
  "input_social_security_num",
  "Input social security num",
  "Social_security_num_input",
  "socialSecurityNumInput",
  "socialsecuritynuminput",
  "SOCIALSECURITYNUMINPUT",
  "social_security_num_input",
  "Social security num input",
  "Field_social_security_number",
  "fieldSocialSecurityNumber",
  "fieldsocialsecuritynumber",
  "FIELDSOCIALSECURITYNUMBER",
  "field_social_security_number",
  "Field social security number",
  "Social_security_number_field",
  "socialSecurityNumberField",
  "socialsecuritynumberfield",
  "SOCIALSECURITYNUMBERFIELD",
  "social_security_number_field",
  "Social security number field",
  "Input_social_security_number",
  "inputSocialSecurityNumber",
  "inputsocialsecuritynumber",
  "INPUTSOCIALSECURITYNUMBER",
  "input_social_security_number",
  "Input social security number",
  "Social_security_number_input",
  "socialSecurityNumberInput",
  "socialsecuritynumberinput",
  "SOCIALSECURITYNUMBERINPUT",
  "social_security_number_input",
  "Social security number input",
  "Field_ssn",
  "fieldSsn",
  "fieldssn",
  "FIELDSSN",
  "field_ssn",
  "Field ssn",
  "Ssn_field",
  "ssnField",
  "ssnfield",
  "SSNFIELD",
  "ssn_field",
  "Ssn field",
  "Input_ssn",
  "inputSsn",
  "inputssn",
  "INPUTSSN",
  "input_ssn",
  "Input ssn",
  "Ssn_input",
  "ssnInput",
  "ssninput",
  "SSNINPUT",
  "ssn_input",
  "Ssn input",
  "Field_stripe_token",
  "fieldStripeToken",
  "fieldstripetoken",
  "FIELDSTRIPETOKEN",
  "field_stripe_token",
  "Field stripe token",
  "Stripe_token_field",
  "stripeTokenField",
  "stripetokenfield",
  "STRIPETOKENFIELD",
  "stripe_token_field",
  "Stripe token field",
  "Input_stripe_token",
  "inputStripeToken",
  "inputstripetoken",
  "INPUTSTRIPETOKEN",
  "input_stripe_token",
  "Input stripe token",
  "Stripe_token_input",
  "stripeTokenInput",
  "stripetokeninput",
  "STRIPETOKENINPUT",
  "stripe_token_input",
  "Stripe token input",
  "Field_token",
  "fieldToken",
  "fieldtoken",
  "FIELDTOKEN",
  "field_token",
  "Field token",
  "Token_field",
  "tokenField",
  "tokenfield",
  "TOKENFIELD",
  "token_field",
  "Token field",
  "Input_token",
  "inputToken",
  "inputtoken",
  "INPUTTOKEN",
  "input_token",
  "Input token",
  "Token_input",
  "tokenInput",
  "tokeninput",
  "TOKENINPUT",
  "token_input",
  "Token input"
]
},{}],32:[function(require,module,exports){
(function (global){
'use strict';

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var required = require('requires-port'),
    qs = require('querystringify'),
    slashes = /^[A-Za-z][A-Za-z0-9+-.]*:\/\//,
    protocolre = /^([a-z][a-z0-9.+-]*:)?(\/\/)?([\S\s]*)/i,
    whitespace = "[\\x09\\x0A\\x0B\\x0C\\x0D\\x20\\xA0\\u1680\\u180E\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u202F\\u205F\\u3000\\u2028\\u2029\\uFEFF]",
    left = new RegExp('^' + whitespace + '+');
/**
 * Trim a given string.
 *
 * @param {String} str String to trim.
 * @public
 */


function trimLeft(str) {
  return (str ? str : '').toString().replace(left, '');
}
/**
 * These are the parse rules for the URL parser, it informs the parser
 * about:
 *
 * 0. The char it Needs to parse, if it's a string it should be done using
 *    indexOf, RegExp using exec and NaN means set as current value.
 * 1. The property we should set when parsing this value.
 * 2. Indication if it's backwards or forward parsing, when set as number it's
 *    the value of extra chars that should be split off.
 * 3. Inherit from location if non existing in the parser.
 * 4. `toLowerCase` the resulting value.
 */


var rules = [['#', 'hash'], // Extract from the back.
['?', 'query'], // Extract from the back.
function sanitize(address) {
  // Sanitize what is left of the address
  return address.replace('\\', '/');
}, ['/', 'pathname'], // Extract from the back.
['@', 'auth', 1], // Extract from the front.
[NaN, 'host', undefined, 1, 1], // Set left over value.
[/:(\d+)$/, 'port', undefined, 1], // RegExp the back.
[NaN, 'hostname', undefined, 1, 1] // Set left over.
];
/**
 * These properties should not be copied or inherited from. This is only needed
 * for all non blob URL's as a blob URL does not include a hash, only the
 * origin.
 *
 * @type {Object}
 * @private
 */

var ignore = {
  hash: 1,
  query: 1
};
/**
 * The location object differs when your code is loaded through a normal page,
 * Worker or through a worker using a blob. And with the blobble begins the
 * trouble as the location object will contain the URL of the blob, not the
 * location of the page where our code is loaded in. The actual origin is
 * encoded in the `pathname` so we can thankfully generate a good "default"
 * location from it so we can generate proper relative URL's again.
 *
 * @param {Object|String} loc Optional default location object.
 * @returns {Object} lolcation object.
 * @public
 */

function lolcation(loc) {
  var globalVar;
  if (typeof window !== 'undefined') globalVar = window;else if (typeof global !== 'undefined') globalVar = global;else if (typeof self !== 'undefined') globalVar = self;else globalVar = {};
  var location = globalVar.location || {};
  loc = loc || location;

  var finaldestination = {},
      type = _typeof(loc),
      key;

  if ('blob:' === loc.protocol) {
    finaldestination = new Url(unescape(loc.pathname), {});
  } else if ('string' === type) {
    finaldestination = new Url(loc, {});

    for (key in ignore) {
      delete finaldestination[key];
    }
  } else if ('object' === type) {
    for (key in loc) {
      if (key in ignore) continue;
      finaldestination[key] = loc[key];
    }

    if (finaldestination.slashes === undefined) {
      finaldestination.slashes = slashes.test(loc.href);
    }
  }

  return finaldestination;
}
/**
 * @typedef ProtocolExtract
 * @type Object
 * @property {String} protocol Protocol matched in the URL, in lowercase.
 * @property {Boolean} slashes `true` if protocol is followed by "//", else `false`.
 * @property {String} rest Rest of the URL that is not part of the protocol.
 */

/**
 * Extract protocol information from a URL with/without double slash ("//").
 *
 * @param {String} address URL we want to extract from.
 * @return {ProtocolExtract} Extracted information.
 * @private
 */


function extractProtocol(address) {
  address = trimLeft(address);
  var match = protocolre.exec(address);
  return {
    protocol: match[1] ? match[1].toLowerCase() : '',
    slashes: !!match[2],
    rest: match[3]
  };
}
/**
 * Resolve a relative URL pathname against a base URL pathname.
 *
 * @param {String} relative Pathname of the relative URL.
 * @param {String} base Pathname of the base URL.
 * @return {String} Resolved pathname.
 * @private
 */


function resolve(relative, base) {
  if (relative === '') return base;
  var path = (base || '/').split('/').slice(0, -1).concat(relative.split('/')),
      i = path.length,
      last = path[i - 1],
      unshift = false,
      up = 0;

  while (i--) {
    if (path[i] === '.') {
      path.splice(i, 1);
    } else if (path[i] === '..') {
      path.splice(i, 1);
      up++;
    } else if (up) {
      if (i === 0) unshift = true;
      path.splice(i, 1);
      up--;
    }
  }

  if (unshift) path.unshift('');
  if (last === '.' || last === '..') path.push('');
  return path.join('/');
}
/**
 * The actual URL instance. Instead of returning an object we've opted-in to
 * create an actual constructor as it's much more memory efficient and
 * faster and it pleases my OCD.
 *
 * It is worth noting that we should not use `URL` as class name to prevent
 * clashes with the global URL instance that got introduced in browsers.
 *
 * @constructor
 * @param {String} address URL we want to parse.
 * @param {Object|String} [location] Location defaults for relative paths.
 * @param {Boolean|Function} [parser] Parser for the query string.
 * @private
 */


function Url(address, location, parser) {
  address = trimLeft(address);

  if (!(this instanceof Url)) {
    return new Url(address, location, parser);
  }

  var relative,
      extracted,
      parse,
      instruction,
      index,
      key,
      instructions = rules.slice(),
      type = _typeof(location),
      url = this,
      i = 0; //
  // The following if statements allows this module two have compatibility with
  // 2 different API:
  //
  // 1. Node.js's `url.parse` api which accepts a URL, boolean as arguments
  //    where the boolean indicates that the query string should also be parsed.
  //
  // 2. The `URL` interface of the browser which accepts a URL, object as
  //    arguments. The supplied object will be used as default values / fall-back
  //    for relative paths.
  //


  if ('object' !== type && 'string' !== type) {
    parser = location;
    location = null;
  }

  if (parser && 'function' !== typeof parser) parser = qs.parse;
  location = lolcation(location); //
  // Extract protocol information before running the instructions.
  //

  extracted = extractProtocol(address || '');
  relative = !extracted.protocol && !extracted.slashes;
  url.slashes = extracted.slashes || relative && location.slashes;
  url.protocol = extracted.protocol || location.protocol || '';
  address = extracted.rest; //
  // When the authority component is absent the URL starts with a path
  // component.
  //

  if (!extracted.slashes) instructions[3] = [/(.*)/, 'pathname'];

  for (; i < instructions.length; i++) {
    instruction = instructions[i];

    if (typeof instruction === 'function') {
      address = instruction(address);
      continue;
    }

    parse = instruction[0];
    key = instruction[1];

    if (parse !== parse) {
      url[key] = address;
    } else if ('string' === typeof parse) {
      if (~(index = address.indexOf(parse))) {
        if ('number' === typeof instruction[2]) {
          url[key] = address.slice(0, index);
          address = address.slice(index + instruction[2]);
        } else {
          url[key] = address.slice(index);
          address = address.slice(0, index);
        }
      }
    } else if (index = parse.exec(address)) {
      url[key] = index[1];
      address = address.slice(0, index.index);
    }

    url[key] = url[key] || (relative && instruction[3] ? location[key] || '' : ''); //
    // Hostname, host and protocol should be lowercased so they can be used to
    // create a proper `origin`.
    //

    if (instruction[4]) url[key] = url[key].toLowerCase();
  } //
  // Also parse the supplied query string in to an object. If we're supplied
  // with a custom parser as function use that instead of the default build-in
  // parser.
  //


  if (parser) url.query = parser(url.query); //
  // If the URL is relative, resolve the pathname against the base URL.
  //

  if (relative && location.slashes && url.pathname.charAt(0) !== '/' && (url.pathname !== '' || location.pathname !== '')) {
    url.pathname = resolve(url.pathname, location.pathname);
  } //
  // We should not add port numbers if they are already the default port number
  // for a given protocol. As the host also contains the port number we're going
  // override it with the hostname which contains no port number.
  //


  if (!required(url.port, url.protocol)) {
    url.host = url.hostname;
    url.port = '';
  } //
  // Parse down the `auth` for the username and password.
  //


  url.username = url.password = '';

  if (url.auth) {
    instruction = url.auth.split(':');
    url.username = instruction[0] || '';
    url.password = instruction[1] || '';
  }

  url.origin = url.protocol && url.host && url.protocol !== 'file:' ? url.protocol + '//' + url.host : 'null'; //
  // The href is just the compiled result.
  //

  url.href = url.toString();
}
/**
 * This is convenience method for changing properties in the URL instance to
 * insure that they all propagate correctly.
 *
 * @param {String} part          Property we need to adjust.
 * @param {Mixed} value          The newly assigned value.
 * @param {Boolean|Function} fn  When setting the query, it will be the function
 *                               used to parse the query.
 *                               When setting the protocol, double slash will be
 *                               removed from the final url if it is true.
 * @returns {URL} URL instance for chaining.
 * @public
 */


function set(part, value, fn) {
  var url = this;

  switch (part) {
    case 'query':
      if ('string' === typeof value && value.length) {
        value = (fn || qs.parse)(value);
      }

      url[part] = value;
      break;

    case 'port':
      url[part] = value;

      if (!required(value, url.protocol)) {
        url.host = url.hostname;
        url[part] = '';
      } else if (value) {
        url.host = url.hostname + ':' + value;
      }

      break;

    case 'hostname':
      url[part] = value;
      if (url.port) value += ':' + url.port;
      url.host = value;
      break;

    case 'host':
      url[part] = value;

      if (/:\d+$/.test(value)) {
        value = value.split(':');
        url.port = value.pop();
        url.hostname = value.join(':');
      } else {
        url.hostname = value;
        url.port = '';
      }

      break;

    case 'protocol':
      url.protocol = value.toLowerCase();
      url.slashes = !fn;
      break;

    case 'pathname':
    case 'hash':
      if (value) {
        var char = part === 'pathname' ? '/' : '#';
        url[part] = value.charAt(0) !== char ? char + value : value;
      } else {
        url[part] = value;
      }

      break;

    default:
      url[part] = value;
  }

  for (var i = 0; i < rules.length; i++) {
    var ins = rules[i];
    if (ins[4]) url[ins[1]] = url[ins[1]].toLowerCase();
  }

  url.origin = url.protocol && url.host && url.protocol !== 'file:' ? url.protocol + '//' + url.host : 'null';
  url.href = url.toString();
  return url;
}
/**
 * Transform the properties back in to a valid and full URL string.
 *
 * @param {Function} stringify Optional query stringify function.
 * @returns {String} Compiled version of the URL.
 * @public
 */


function toString(stringify) {
  if (!stringify || 'function' !== typeof stringify) stringify = qs.stringify;
  var query,
      url = this,
      protocol = url.protocol;
  if (protocol && protocol.charAt(protocol.length - 1) !== ':') protocol += ':';
  var result = protocol + (url.slashes ? '//' : '');

  if (url.username) {
    result += url.username;
    if (url.password) result += ':' + url.password;
    result += '@';
  }

  result += url.host + url.pathname;
  query = 'object' === _typeof(url.query) ? stringify(url.query) : url.query;
  if (query) result += '?' !== query.charAt(0) ? '?' + query : query;
  if (url.hash) result += url.hash;
  return result;
}

Url.prototype = {
  set: set,
  toString: toString
}; //
// Expose the URL parser and some additional properties that might be useful for
// others or testing.
//

Url.extractProtocol = extractProtocol;
Url.location = lolcation;
Url.trimLeft = trimLeft;
Url.qs = qs;
module.exports = Url;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"querystringify":28,"requires-port":29}],33:[function(require,module,exports){
"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var ObjectId = require('bson-objectid');

var Url = require('url-parse');

var convertHrtime = require('convert-hrtime');

var cookie = require('cookie');

var creditCardType = require('credit-card-type');

var debug = require('debug')('parse-request');

var hrtime = require('browser-process-hrtime');

var httpHeaders = require('http-headers');

var isArrayBuffer = require('is-array-buffer');

var isBuffer = require('is-buffer');

var isStream = require('is-stream');

var isUUID = require('is-uuid');

var ms = require('ms');

var noCase = require('no-case');

var rfdc = require('rfdc');

var safeStringify = require('fast-safe-stringify');

var sensitiveFields = require('sensitive-fields'); // https://github.com/cabinjs/request-received


var startTime = Symbol.for('request-received.startTime');
var pinoHttpStartTime = Symbol.for('pino-http.startTime');
var disableBodyParsingSymbol = Symbol.for('parse-request.disableBodyParsing');
var disableFileParsingSymbol = Symbol.for('parse-request.disableFileParsing');
var hashMapIds = {
  _id: true,
  id: true
};
var regexId = /_id$/;

function maskArray(obj, options) {
  var arr = [];
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = obj.entries()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var _step$value = _slicedToArray(_step.value, 2),
          i = _step$value[0],
          element = _step$value[1];

      arr[i] = maskSpecialTypes(element, options);
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return != null) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return arr;
}

function maskSpecialTypes(obj, options) {
  options = Object.assign({
    maskBuffers: true,
    maskStreams: true,
    checkObjectId: true
  }, options);
  if (_typeof(obj) !== 'object') return obj; // we need to return an array if passed an array

  if (Array.isArray(obj)) return maskArray(obj, options); // if it was a bson objectid return early

  if (options.checkObjectId && ObjectId.isValid(obj)) return obj.toString(); // check if it was a stream

  if (options.maskStreams && isStream(obj)) return {
    type: 'Stream'
  }; // check if it was a buffer or array buffer
  // before iterating over the object's keys

  if (options.maskBuffers) {
    if (isBuffer(obj)) return {
      type: 'Buffer',
      byteLength: obj.byteLength
    };
    if (isArrayBuffer(obj)) return {
      type: 'ArrayBuffer',
      byteLength: obj.byteLength
    };
  } // we need to return an object if passed an object


  var masked = {}; // for...in is much faster than Object.entries or any alternative
  // TODO: we should optimize this further in the future

  for (var key in obj) {
    if (_typeof(obj[key]) === 'object') {
      if (Array.isArray(obj[key])) {
        masked[key] = maskSpecialTypes(obj[key], options);
      } else if (options.maskStreams && isStream(obj[key])) {
        masked[key] = {
          type: 'Stream'
        };
      } else if (options.maskBuffers && isBuffer(obj[key])) {
        masked[key] = {
          type: 'Buffer',
          byteLength: obj[key].byteLength
        };
      } else if (options.maskBuffers && isArrayBuffer(obj[key])) {
        masked[key] = {
          type: 'ArrayBuffer',
          byteLength: obj[key].byteLength
        };
      } else {
        masked[key] = maskSpecialTypes(obj[key], options);
      }
    } else {
      masked[key] = obj[key];
    }
  }

  return masked;
}

function pick(object, keys) {
  return keys.reduce(function (obj, key) {
    if (object && Object.prototype.hasOwnProperty.call(object, key)) {
      obj[key] = object[key];
    }

    return obj;
  }, {});
}

function isNull(val) {
  return val === null;
}

function isUndefined(val) {
  return typeof val === 'undefined';
}

function isObject(val) {
  return _typeof(val) === 'object' && val !== null && !Array.isArray(val);
}

function isString(val) {
  return typeof val === 'string';
} // <https://github.com/braintree/credit-card-type/issues/90>


function isCreditCard(val) {
  var digits = val.replace(/\D/g, '');
  var types = creditCardType(digits);
  if (!Array.isArray(types) || types.length === 0) return false;
  var match = false;
  var _iteratorNormalCompletion2 = true;
  var _didIteratorError2 = false;
  var _iteratorError2 = undefined;

  try {
    for (var _iterator2 = types[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
      var type = _step2.value;
      if (match) break; // can match any one of the lengths

      if (!Array.isArray(type.lengths) || type.lengths.length === 0) continue;

      for (var l = 0; l < type.lengths.length; l++) {
        var len = type.lengths[l];

        if (Number.isFinite(len) && len === digits.length) {
          match = true;
          break;
        }
      }
    }
  } catch (err) {
    _didIteratorError2 = true;
    _iteratorError2 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
        _iterator2.return();
      }
    } finally {
      if (_didIteratorError2) {
        throw _iteratorError2;
      }
    }
  }

  return match;
}

function isID(val, options) {
  // if it was an objectid return early
  if (options.checkObjectId && ObjectId.isValid(val)) return true; // if it was a cuid return early
  // <https://github.com/ericelliott/cuid/issues/88#issuecomment-339848922>

  if (options.checkCuid && val.indexOf('c') === 0 && val.length >= 7) return true; // if it was a uuid v1-5 return early

  if (options.checkUUID && isUUID.anyNonNil(val)) return true;
  return false;
}

function maskString(key, val, props, options) {
  var isKeyString = isString(key);

  if (options.isHeaders) {
    // headers are case-insensitive
    props = props.map(function (prop) {
      return prop.toLowerCase();
    });

    if (props.includes('referer') || props.includes('referrer')) {
      if (!props.includes('referer')) props.push('referer');
      if (!props.includes('referrer')) props.push('referrer');
    }
  }

  var notIncludedInProps = !isKeyString || !props.includes(key);

  if (!options.isHeaders) {
    // check if it closely resembles a primary ID and return early if so
    if (isKeyString && options.checkId) {
      // _id
      // id
      // ID
      // Id
      if (hashMapIds[key.toLowerCase()]) return val; // product_id
      // product-id
      // product[id]
      // productId
      // productID

      var snakeCase = noCase(key, null, '_');
      if (regexId.test(snakeCase)) return val;
    } // if it was an objectid, cuid, or uuid return early


    if (isID(val, options) && notIncludedInProps) return val; // if it was a credit card then replace all digits with asterisk

    if (options.maskCreditCards && isCreditCard(val)) return val.replace(/[^\D\s]/g, '*');
  }

  if (notIncludedInProps) return val; // replace only the authentication <credentials> portion with asterisk
  // Authorization: <type> <credentials>

  if (options.isHeaders && key === 'authorization') return "".concat(val.split(' ')[0], " ").concat(val.slice(val.indexOf(' ') + 1).replace(/./g, '*'));
  return val.replace(/./g, '*');
}

function headersToLowerCase(headers) {
  if (_typeof(headers) !== 'object' || Array.isArray(headers)) return headers;
  var lowerCasedHeaders = {};

  for (var header in headers) {
    if (isString(headers[header])) lowerCasedHeaders[header.toLowerCase()] = headers[header];
  }

  return lowerCasedHeaders;
}

function maskProps(obj, props, options) {
  options = Object.assign({
    maskCreditCards: true,
    isHeaders: false,
    checkId: true,
    checkCuid: true,
    checkObjectId: true,
    checkUUID: true
  }, options);
  if (isString(obj)) return maskString(null, obj, props, options); // for...in is much faster than Object.entries or any alternative

  for (var key in obj) {
    if (_typeof(obj[key]) === 'object') obj[key] = maskProps(obj[key], props, options);else if (isString(obj[key])) obj[key] = maskString(key, obj[key], props, options);
  }

  return obj;
} // inspired by raven's parseRequest
// eslint-disable-next-line complexity


var parseRequest = function parseRequest() {
  var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var start = hrtime();
  var id = new ObjectId();
  config = Object.assign({
    req: false,
    ctx: false,
    responseHeaders: '',
    userFields: ['id', 'email', 'full_name', 'ip_address'],
    sanitizeFields: sensitiveFields,
    sanitizeHeaders: ['authorization'],
    maskCreditCards: true,
    maskBuffers: true,
    maskStreams: true,
    checkId: true,
    checkCuid: true,
    checkObjectId: true,
    checkUUID: true,
    // <https://github.com/davidmarkclements/rfdc>
    rfdc: {
      proto: false,
      circles: false
    },
    parseBody: true,
    parseFiles: true
  }, config);
  var clone = rfdc(config.rfdc);
  var _config = config,
      req = _config.req,
      ctx = _config.ctx,
      responseHeaders = _config.responseHeaders,
      userFields = _config.userFields,
      sanitizeFields = _config.sanitizeFields,
      sanitizeHeaders = _config.sanitizeHeaders,
      maskCreditCards = _config.maskCreditCards,
      maskBuffers = _config.maskBuffers,
      maskStreams = _config.maskStreams,
      checkId = _config.checkId,
      checkCuid = _config.checkCuid,
      checkObjectId = _config.checkObjectId,
      checkUUID = _config.checkUUID,
      parseBody = _config.parseBody,
      parseFiles = _config.parseFiles; // do not allow both `req` and `ctx` to be specified

  if (req && ctx) throw new Error('You must either use `req` (Express/Connect) or `ctx` (Koa) option, but not both');
  var nodeReq = ctx ? ctx.req : req ? req : {};
  var maskPropsOptions = {
    maskCreditCards: maskCreditCards,
    checkId: checkId,
    checkCuid: checkCuid,
    checkObjectId: checkObjectId,
    checkUUID: checkUUID
  };
  var maskSpecialTypesOptions = {
    maskBuffers: maskBuffers,
    maskStreams: maskStreams,
    checkObjectId: checkObjectId
  };
  var requestHeaders = nodeReq.headers;
  var headers;
  if (requestHeaders) headers = maskProps(headersToLowerCase(requestHeaders), sanitizeHeaders, {
    isHeaders: true
  });
  var method;
  if (ctx) method = ctx.method;else if (req) method = req.method; // inspired from `preserve-qs` package

  var originalUrl;
  if (ctx) originalUrl = ctx.originalUrl || ctx.url;else if (req) originalUrl = req.originalUrl || req.url;
  var query;
  var absoluteUrl;

  if (originalUrl) {
    originalUrl = new Url(originalUrl, {}); // parse query, path, and origin to prepare absolute Url

    query = Url.qs.parse(originalUrl.query);
    var path = originalUrl.origin === 'null' ? originalUrl.pathname : "".concat(originalUrl.origin).concat(originalUrl.pathname);
    var qs = Url.qs.stringify(query, true);
    absoluteUrl = path + qs;
  } // default to the user object


  var user = {};
  var parsedUser;
  if (ctx && isObject(ctx.state.user)) parsedUser = ctx.state.user;else if (req && isObject(req.user)) parsedUser = req.user;

  if (parsedUser) {
    try {
      user = typeof parsedUser.toJSON === 'function' ? parsedUser.toJSON() : typeof parsedUser.toObject === 'function' ? parsedUser.toObject() : clone(parsedUser);
    } catch (err) {
      debug(err);

      try {
        user = JSON.parse(safeStringify(parsedUser));
      } catch (err) {
        debug(err);
      }
    }
  }

  var ip = ctx ? ctx.ip : req ? req.ip : null;
  if (ip && !isString(user.ip_address)) user.ip_address = ip;
  if (user && Array.isArray(userFields) && userFields.length > 0) user = pick(user, userFields); // recursively search through user and filter out passwords from it

  if (user) user = maskProps(user, sanitizeFields, maskPropsOptions);
  var body;
  var originalBody = ctx ? ctx.request._originalBody || ctx.request.body : req ? req._originalBody || req.body : null;

  if (originalBody && parseBody && !nodeReq[disableBodyParsingSymbol]) {
    //
    // recursively search through body and filter out passwords from it
    // <https://github.com/niftylettuce/frisbee/issues/68>
    // <https://github.com/bitinn/node-fetch/blob/master/src/request.js#L75-L78>
    //
    if (!['GET', 'HEAD'].includes(method) && !isUndefined(originalBody)) body = clone(maskBuffers || maskStreams ? maskSpecialTypes(originalBody, maskSpecialTypesOptions) : originalBody);
    body = maskProps(body, sanitizeFields, maskPropsOptions);
    if (!isUndefined(body) && !isNull(body) && !isString(body)) body = safeStringify(body);
  } // parse the cookies (if any were set)


  var cookies;
  if (headers && headers.cookie) cookies = cookie.parse(headers.cookie);
  var result = {
    id: id.toString(),
    //
    // NOTE: regarding the naming convention of `timestamp`, it seems to be the
    // most widely used and supported property name across logging services
    //
    timestamp: id.getTimestamp().toISOString()
  };
  if (ctx || req) result.request = {};
  if (method) result.request.method = method;
  if (query) result.request.query = query;
  if (headers) result.request.headers = headers;
  if (cookies) result.request.cookies = cookies;
  if (absoluteUrl) result.request.url = absoluteUrl;
  if (user) result.user = user;
  if (originalBody && parseBody && body && !nodeReq[disableBodyParsingSymbol]) result.request.body = body; //
  // Also note that there is no standard for setting a request received time.
  //
  // Examples:
  //
  // 1) koa-req-logger uses `ctx.start`
  // <https://github.com/DrBarnabus/koa-req-logger/blob/master/src/index.ts#L198>
  //
  // 2) morgan uses `req._startAt` and `req._startTime` which are not
  // req._startAt = process.hrtime()
  // req._startTime = new Date()
  // <https://github.com/expressjs/morgan/blob/master/index.js#L500-L508>
  //
  // 3) pino uses `Symbol('startTime')` but it does not expose it easily
  // <https://github.com/pinojs/pino-http/issues/65>
  //
  // 4) response-time does not expose anything
  // <https://github.com/expressjs/response-time/pull/18>
  //
  // Therefore we created `request-received` middleware that is required
  // to be used in order for `request.timestamp` to be populated with ISO-8601
  // <https://github.com/cabinjs/request-received>
  //
  // We also opened the following PR's in an attempt to make this a drop-in:
  //
  // * https://github.com/pinojs/pino-http/pull/67
  // * https://github.com/expressjs/morgan/pull/201
  // * https://github.com/expressjs/response-time/pull/20
  // * https://github.com/DataDog/node-connect-datadog/pull/7
  // * https://github.com/DrBarnabus/koa-req-logger/pull/2
  //
  // add request.timestamp (parse req[$x] variable)

  if (nodeReq[startTime] instanceof Date) result.request.timestamp = nodeReq[startTime].toISOString();else if (typeof nodeReq[startTime] === 'number') result.request.timestamp = new Date(nodeReq[startTime]).toISOString();else if (typeof nodeReq[pinoHttpStartTime] === 'number') result.request.timestamp = new Date(nodeReq[pinoHttpStartTime]).toISOString();else if (nodeReq._startTime instanceof Date) result.request.timestamp = nodeReq._startTime.toISOString();else if (typeof nodeReq._startTime === 'number') result.request.timestamp = new Date(nodeReq._startTime).toISOString(); //
  // conditionally add a `response` object if and only if
  // `responseHeaders` option was passed, and it was a non-empty string or object
  //

  if (isObject(responseHeaders) && Object.keys(responseHeaders).length > 0) {
    result.response = {};
    result.response.headers = clone(responseHeaders);
  } else if (isString(responseHeaders)) {
    // <https://github.com/nodejs/node/issues/28302>
    var parsedHeaders = httpHeaders(responseHeaders);
    result.response = {};

    if (isObject(parsedHeaders.headers)) {
      result.response.headers = parsedHeaders.headers; // parse the status line
      // <https://www.w3.org/Protocols/rfc2616/rfc2616-sec6.html#sec6.1>

      if (isObject(parsedHeaders.version) && typeof parsedHeaders.version.major === 'number' && typeof parsedHeaders.version.minor === 'number') result.response.http_version = "".concat(parsedHeaders.version.major, ".").concat(parsedHeaders.version.minor);
      if (typeof parsedHeaders.statusCode === 'number') result.response.status_code = parsedHeaders.statusCode;
      if (isString(parsedHeaders.statusMessage)) result.response.reason_phrase = parsedHeaders.statusMessage;
    } else {
      result.response.headers = parsedHeaders;
    }
  }

  if (result.response && result.response.headers) {
    result.response.headers = maskProps(headersToLowerCase(result.response.headers), sanitizeHeaders, {
      isHeaders: true
    });

    if (result.response.headers && Object.keys(result.response.headers).length === 0) {
      delete result.response;
    } else {
      // add response.timestamp (response Date header)
      try {
        if (result.response.headers.date) result.response.timestamp = new Date(result.response.headers.date).toISOString();
      } catch (err) {
        debug(err);
      } // add response.duration (parsed from response X-Response-Time header)


      try {
        if (result.response.headers['x-response-time']) {
          var duration = ms(result.response.headers['x-response-time']);
          if (typeof duration === 'number') result.response.duration = duration;
        }
      } catch (err) {
        debug(err);
      }
    }
  } // add request's id if available from `req.id`


  var requestId;

  if (ctx) {
    if (isString(ctx.id)) requestId = ctx.id;else if (isString(ctx.request.id)) requestId = ctx.request.id;else if (isString(ctx.req.id)) requestId = ctx.req.id;else if (isString(ctx.state.reqId)) requestId = ctx.state.reqId;else if (isString(ctx.state.id)) requestId = ctx.state.id;
  } else if (req && isString(req.id)) {
    requestId = req.id;
  } // TODO: we should probably validate this id somehow
  // (e.g. like we do with checking if cuid or uuid or objectid)


  if (requestId) result.request.id = requestId;else if (headers && headers['x-request-id']) result.request.id = headers['x-request-id']; // add httpVersion if possible (server-side only)

  var httpVersion = nodeReq.httpVersion,
      httpVersionMajor = nodeReq.httpVersionMajor,
      httpVersionMinor = nodeReq.httpVersionMinor;
  if (isString(httpVersion)) result.request.http_version = httpVersion;else if (typeof httpVersionMajor === 'number' && typeof httpVersionMinor === 'number' || isString(httpVersionMajor) && isString(httpVersionMinor)) result.request.http_version = "".concat(httpVersionMajor, ".").concat(httpVersionMinor); // parse `req.file` and `req.files` for multer v1.x and v2.x

  if (parseFiles && !nodeReq[disableFileParsingSymbol]) {
    // koa-multer@1.x binded to `ctx.req`
    // and then koa-multer was forked by @niftylettuce to @koajs/multer
    // and the 2.0.0 release changed it so it uses `ctx.file` and `ctx.files`
    // (so it doesn't bind to the `ctx.req` Node original request object
    // <https://github.com/koa-modules/multer/pull/15>
    var file;
    var files;

    if (ctx) {
      file = ctx.file || ctx.request.file || ctx.req.file;
      files = ctx.files || ctx.request.files || ctx.req.files;
    } else if (req) {
      file = req.file;
      files = req.files;
    }

    if (_typeof(file) === 'object') result.request.file = safeStringify(clone(maskSpecialTypes(file, maskSpecialTypesOptions)));
    if (_typeof(files) === 'object') result.request.files = safeStringify(clone(maskSpecialTypes(files, maskSpecialTypesOptions)));
  }

  result.duration = convertHrtime(hrtime(start)).milliseconds;
  return result;
};

module.exports = parseRequest;

},{"browser-process-hrtime":1,"bson-objectid":2,"convert-hrtime":3,"cookie":4,"credit-card-type":5,"debug":12,"fast-safe-stringify":14,"http-headers":15,"is-array-buffer":16,"is-buffer":17,"is-stream":18,"is-uuid":19,"ms":21,"no-case":23,"rfdc":30,"sensitive-fields":31,"url-parse":32}]},{},[33])(33)
});
